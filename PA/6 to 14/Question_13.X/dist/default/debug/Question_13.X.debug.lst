

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Mon May 23 17:52:33 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     _RCREG	set	4014
    63  0000                     _SPBRG	set	4015
    64  0000                     _TRISCbits	set	3988
    65  0000                     _TRISC	set	3988
    66  0000                     _PIR1bits	set	3998
    67  0000                     _RCSTA	set	4011
    68  0000                     _TXSTA	set	4012
    69  0000                     _TXREG	set	4013
    70                           
    71                           	psect	smallconst
    72  000800                     __psmallconst:
    73                           	callstack 0
    74  000800  00                 	db	0
    75  000801                     STR_2:
    76  000801  0A                 	db	10
    77  000802  45                 	db	69	;'E'
    78  000803  6E                 	db	110	;'n'
    79  000804  74                 	db	116	;'t'
    80  000805  65                 	db	101	;'e'
    81  000806  72                 	db	114	;'r'
    82  000807  65                 	db	101	;'e'
    83  000808  64                 	db	100	;'d'
    84  000809  3A                 	db	58	;':'
    85  00080A  20                 	db	32
    86  00080B  25                 	db	37
    87  00080C  64                 	db	100	;'d'
    88  00080D  00                 	db	0
    89  00080E                     STR_1:
    90  00080E  0A                 	db	10
    91  00080F  20                 	db	32
    92  000810  50                 	db	80	;'P'
    93  000811  49                 	db	73	;'I'
    94  000812  43                 	db	67	;'C'
    95  000813  54                 	db	84	;'T'
    96  000814  00                 	db	0
    97  000815  00                 	db	0	; dummy byte at the end
    98  0000                     
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102  0012AE                     __pcinit:
   103                           	callstack 0
   104  0012AE                     start_initialization:
   105                           	callstack 0
   106  0012AE                     __initialization:
   107                           	callstack 0
   108                           
   109                           ; Clear objects allocated to BANK0 (40 bytes)
   110  0012AE  EE00  F060         	lfsr	0,__pbssBANK0
   111  0012B2  0E28               	movlw	40
   112  0012B4                     clear_0:
   113  0012B4  6AEE               	clrf	postinc0,c
   114  0012B6  06E8               	decf	wreg,f,c
   115  0012B8  E1FD               	bnz	clear_0
   116  0012BA                     end_of_initialization:
   117                           	callstack 0
   118  0012BA                     __end_of__initialization:
   119                           	callstack 0
   120  0012BA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   121  0012BC  6EF8               	movwf	tblptru,c
   122  0012BE  0E08               	movlw	high __Lsmallconst
   123  0012C0  6EF7               	movwf	tblptrh,c
   124  0012C2  0100               	movlb	0
   125  0012C4  EF7A  F008         	goto	_main	;jump to C main() function
   126                           
   127                           	psect	bssBANK0
   128  000060                     __pbssBANK0:
   129                           	callstack 0
   130  000060                     _nout:
   131                           	callstack 0
   132  000060                     	ds	2
   133  000062                     _width:
   134                           	callstack 0
   135  000062                     	ds	2
   136  000064                     _prec:
   137                           	callstack 0
   138  000064                     	ds	2
   139  000066                     _flags:
   140                           	callstack 0
   141  000066                     	ds	2
   142  000068                     _dbuf:
   143                           	callstack 0
   144  000068                     	ds	32
   145                           
   146                           	psect	cstackBANK0
   147  000088                     __pcstackBANK0:
   148                           	callstack 0
   149  000088                     main@a:
   150                           	callstack 0
   151                           
   152                           ; 2 bytes @ 0x0
   153  000088                     	ds	2
   154                           
   155                           	psect	cstackCOMRAM
   156  000001                     __pcstackCOMRAM:
   157                           	callstack 0
   158  000001                     ?_strlen:
   159                           	callstack 0
   160  000001                     ?___aodiv:
   161                           	callstack 0
   162  000001                     ?___aomod:
   163                           	callstack 0
   164  000001                     putch@c:
   165                           	callstack 0
   166  000001                     strlen@s:
   167                           	callstack 0
   168  000001                     ___aodiv@dividend:
   169                           	callstack 0
   170  000001                     ___aomod@dividend:
   171                           	callstack 0
   172                           
   173                           ; 8 bytes @ 0x0
   174  000001                     	ds	1
   175  000002                     fputc@c:
   176                           	callstack 0
   177                           
   178                           ; 2 bytes @ 0x1
   179  000002                     	ds	1
   180  000003                     strlen@a:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x2
   184  000003                     	ds	1
   185  000004                     fputc@fp:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0x3
   189  000004                     	ds	2
   190  000006                     ??_fputc:
   191                           
   192                           ; 1 bytes @ 0x5
   193  000006                     	ds	3
   194  000009                     ___aodiv@divisor:
   195                           	callstack 0
   196  000009                     ___aomod@divisor:
   197                           	callstack 0
   198                           
   199                           ; 8 bytes @ 0x8
   200  000009                     	ds	2
   201  00000B                     fputs@s:
   202                           	callstack 0
   203                           
   204                           ; 2 bytes @ 0xA
   205  00000B                     	ds	2
   206  00000D                     fputs@fp:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0xC
   210  00000D                     	ds	2
   211  00000F                     fputs@c:
   212                           	callstack 0
   213                           
   214                           ; 1 bytes @ 0xE
   215  00000F                     	ds	1
   216  000010                     fputs@i:
   217                           	callstack 0
   218                           
   219                           ; 2 bytes @ 0xF
   220  000010                     	ds	1
   221  000011                     ___aodiv@counter:
   222                           	callstack 0
   223  000011                     ___aomod@counter:
   224                           	callstack 0
   225                           
   226                           ; 1 bytes @ 0x10
   227  000011                     	ds	1
   228  000012                     ?_pad:
   229                           	callstack 0
   230  000012                     ___aodiv@sign:
   231                           	callstack 0
   232  000012                     ___aomod@sign:
   233                           	callstack 0
   234  000012                     pad@fp:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0x11
   238  000012                     	ds	1
   239  000013                     ?_abs:
   240                           	callstack 0
   241  000013                     abs@a:
   242                           	callstack 0
   243  000013                     ___aodiv@quotient:
   244                           	callstack 0
   245                           
   246                           ; 8 bytes @ 0x12
   247  000013                     	ds	1
   248  000014                     pad@buf:
   249                           	callstack 0
   250                           
   251                           ; 2 bytes @ 0x13
   252  000014                     	ds	1
   253  000015                     ??_abs:
   254                           
   255                           ; 1 bytes @ 0x14
   256  000015                     	ds	1
   257  000016                     pad@p:
   258                           	callstack 0
   259                           
   260                           ; 2 bytes @ 0x15
   261  000016                     	ds	2
   262  000018                     ??_pad:
   263                           
   264                           ; 1 bytes @ 0x17
   265  000018                     	ds	1
   266  000019                     pad@i:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0x18
   270  000019                     	ds	2
   271  00001B                     pad@w:
   272                           	callstack 0
   273                           
   274                           ; 2 bytes @ 0x1A
   275  00001B                     	ds	2
   276  00001D                     ?_dtoa:
   277                           	callstack 0
   278  00001D                     dtoa@fp:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0x1C
   282  00001D                     	ds	2
   283  00001F                     dtoa@d:
   284                           	callstack 0
   285                           
   286                           ; 8 bytes @ 0x1E
   287  00001F                     	ds	8
   288  000027                     ??_dtoa:
   289                           
   290                           ; 1 bytes @ 0x26
   291  000027                     	ds	8
   292  00002F                     _dtoa$635:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0x2E
   296  00002F                     	ds	2
   297  000031                     dtoa@p:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x30
   301  000031                     	ds	2
   302  000033                     dtoa@w:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x32
   306  000033                     	ds	2
   307  000035                     dtoa@s:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x34
   311  000035                     	ds	2
   312  000037                     dtoa@n:
   313                           	callstack 0
   314                           
   315                           ; 8 bytes @ 0x36
   316  000037                     	ds	8
   317  00003F                     dtoa@i:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x3E
   321  00003F                     	ds	2
   322  000041                     ?_vfpfcnvrt:
   323                           	callstack 0
   324  000041                     vfpfcnvrt@fp:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0x40
   328  000041                     	ds	2
   329  000043                     vfpfcnvrt@fmt:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x42
   333  000043                     	ds	2
   334  000045                     vfpfcnvrt@ap:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x44
   338  000045                     	ds	2
   339  000047                     ??_vfpfcnvrt:
   340                           
   341                           ; 1 bytes @ 0x46
   342  000047                     	ds	2
   343  000049                     vfpfcnvrt@ll:
   344                           	callstack 0
   345                           
   346                           ; 8 bytes @ 0x48
   347  000049                     	ds	8
   348  000051                     ?_vfprintf:
   349                           	callstack 0
   350  000051                     vfprintf@fp:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x50
   354  000051                     	ds	2
   355  000053                     vfprintf@fmt:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x52
   359  000053                     	ds	2
   360  000055                     vfprintf@ap:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x54
   364  000055                     	ds	2
   365  000057                     vfprintf@cfmt:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x56
   369  000057                     	ds	2
   370  000059                     ?_printf:
   371                           	callstack 0
   372  000059                     printf@fmt:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x58
   376  000059                     	ds	4
   377  00005D                     printf@ap:
   378                           	callstack 0
   379                           
   380                           ; 2 bytes @ 0x5C
   381  00005D                     	ds	2
   382  00005F                     
   383                           ; 1 bytes @ 0x5E
   384 ;;
   385 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   386 ;;
   387 ;; *************** function _main *****************
   388 ;; Defined at:
   389 ;;		line 16 in file "Uart_Transmit_PICT.c"
   390 ;; Parameters:    Size  Location     Type
   391 ;;		None
   392 ;; Auto vars:     Size  Location     Type
   393 ;;  a               2    0[BANK0 ] int 
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      void 
   396 ;; Registers used:
   397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   398 ;; Tracked objects:
   399 ;;		On entry : 0/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   403 ;;      Params:         0       0       0       0       0       0       0       0       0
   404 ;;      Locals:         0       2       0       0       0       0       0       0       0
   405 ;;      Temps:          0       0       0       0       0       0       0       0       0
   406 ;;      Totals:         0       2       0       0       0       0       0       0       0
   407 ;;Total ram usage:        2 bytes
   408 ;; Hardware stack levels required when called: 8
   409 ;; This function calls:
   410 ;;		_printf
   411 ;; This function is called by:
   412 ;;		Startup code after reset
   413 ;; This function uses a non-reentrant model
   414 ;;
   415                           
   416                           	psect	text0
   417  0010F4                     __ptext0:
   418                           	callstack 0
   419  0010F4                     _main:
   420                           	callstack 23
   421  0010F4                     
   422                           ;Uart_Transmit_PICT.c: 19:     TRISC=0;
   423  0010F4  0E00               	movlw	0
   424  0010F6  6E94               	movwf	148,c	;volatile
   425                           
   426                           ;Uart_Transmit_PICT.c: 20:     TXSTA=0x20;
   427  0010F8  0E20               	movlw	32
   428  0010FA  6EAC               	movwf	172,c	;volatile
   429                           
   430                           ;Uart_Transmit_PICT.c: 21:     RCSTA=0b10010000;
   431  0010FC  0E90               	movlw	144
   432  0010FE  6EAB               	movwf	171,c	;volatile
   433                           
   434                           ;Uart_Transmit_PICT.c: 22:     SPBRG=6;
   435  001100  0E06               	movlw	6
   436  001102  6EAF               	movwf	175,c	;volatile
   437  001104                     
   438                           ;Uart_Transmit_PICT.c: 23:     TRISCbits.TRISC7=1;
   439  001104  8E94               	bsf	148,7,c	;volatile
   440  001106                     l1362:
   441                           
   442                           ;Uart_Transmit_PICT.c: 25:         printf("\n PICT");
   443  001106  0E0E               	movlw	low STR_1
   444  001108  6E59               	movwf	printf@fmt^0,c
   445  00110A  0E08               	movlw	high STR_1
   446  00110C  6E5A               	movwf	(printf@fmt+1)^0,c
   447  00110E  EC44  F009         	call	_printf	;wreg free
   448  001112                     
   449                           ;Uart_Transmit_PICT.c: 26:         a = RCREG;
   450  001112  CFAE F088          	movff	4014,main@a	;volatile
   451  001116  0100               	movlb	0	; () banked
   452  001118  6B89               	clrf	(main@a+1)& (0+255),b
   453  00111A                     
   454                           ; BSR set to: 0
   455                           ;Uart_Transmit_PICT.c: 27:         if(a>=1 && a<=9){
   456  00111A  BF89               	btfsc	(main@a+1)& (0+255),7,b
   457  00111C  EF98  F008         	goto	u931
   458  001120  5189               	movf	(main@a+1)& (0+255),w,b
   459  001122  E108               	bnz	u930
   460  001124  0588               	decf	main@a& (0+255),w,b
   461  001126  A0D8               	btfss	status,0,c
   462  001128  EF98  F008         	goto	u931
   463  00112C  EF9A  F008         	goto	u930
   464  001130                     u931:
   465  001130  EF83  F008         	goto	l1362
   466  001134                     u930:
   467  001134                     
   468                           ; BSR set to: 0
   469  001134  BF89               	btfsc	(main@a+1)& (0+255),7,b
   470  001136  EFA8  F008         	goto	u940
   471  00113A  5189               	movf	(main@a+1)& (0+255),w,b
   472  00113C  E107               	bnz	u941
   473  00113E  0E0A               	movlw	10
   474  001140  5D88               	subwf	main@a& (0+255),w,b
   475  001142  B0D8               	btfsc	status,0,c
   476  001144  EFA6  F008         	goto	u941
   477  001148  EFA8  F008         	goto	u940
   478  00114C                     u941:
   479  00114C  EF83  F008         	goto	l1362
   480  001150                     u940:
   481  001150                     
   482                           ; BSR set to: 0
   483                           ;Uart_Transmit_PICT.c: 28:             printf("\nEntered: %d", a);
   484  001150  0E01               	movlw	low STR_2
   485  001152  6E59               	movwf	printf@fmt^0,c
   486  001154  0E08               	movlw	high STR_2
   487  001156  6E5A               	movwf	(printf@fmt+1)^0,c
   488  001158  C088  F05B         	movff	main@a,?_printf+2
   489  00115C  C089  F05C         	movff	main@a+1,?_printf+3
   490  001160  EC44  F009         	call	_printf	;wreg free
   491  001164                     l33:
   492  001164  EFB2  F008         	goto	l33
   493  001168  EF00  F000         	goto	start
   494  00116C                     __end_of_main:
   495                           	callstack 0
   496                           
   497 ;; *************** function _printf *****************
   498 ;; Defined at:
   499 ;;		line 5 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/printf.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;  fmt             2   88[COMRAM] PTR const unsigned char 
   502 ;;		 -> STR_2(13), STR_1(7), 
   503 ;; Auto vars:     Size  Location     Type
   504 ;;  ap              2   92[COMRAM] PTR void [1]
   505 ;;		 -> ?_printf(2), 
   506 ;;  ret             2    0        int 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  2   88[COMRAM] int 
   509 ;; Registers used:
   510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   516 ;;      Params:         4       0       0       0       0       0       0       0       0
   517 ;;      Locals:         2       0       0       0       0       0       0       0       0
   518 ;;      Temps:          0       0       0       0       0       0       0       0       0
   519 ;;      Totals:         6       0       0       0       0       0       0       0       0
   520 ;;Total ram usage:        6 bytes
   521 ;; Hardware stack levels used: 1
   522 ;; Hardware stack levels required when called: 7
   523 ;; This function calls:
   524 ;;		_vfprintf
   525 ;; This function is called by:
   526 ;;		_main
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           	psect	text1
   531  001288                     __ptext1:
   532                           	callstack 0
   533  001288                     _printf:
   534                           	callstack 23
   535  001288  0E5B               	movlw	low (?_printf+2)
   536  00128A  6E5D               	movwf	printf@ap^0,c
   537  00128C  0E00               	movlw	high (?_printf+2)
   538  00128E  6E5E               	movwf	(printf@ap+1)^0,c
   539  001290  0E00               	movlw	0
   540  001292  6E51               	movwf	vfprintf@fp^0,c
   541  001294  0E00               	movlw	0
   542  001296  6E52               	movwf	(vfprintf@fp+1)^0,c
   543  001298  C059  F053         	movff	printf@fmt,vfprintf@fmt
   544  00129C  C05A  F054         	movff	printf@fmt+1,vfprintf@fmt+1
   545  0012A0  0E5D               	movlw	low printf@ap
   546  0012A2  6E55               	movwf	vfprintf@ap^0,c
   547  0012A4  0E00               	movlw	high printf@ap
   548  0012A6  6E56               	movwf	(vfprintf@ap+1)^0,c
   549  0012A8  ECB6  F008         	call	_vfprintf	;wreg free
   550  0012AC  0012               	return		;funcret
   551  0012AE                     __end_of_printf:
   552                           	callstack 0
   553                           
   554 ;; *************** function _vfprintf *****************
   555 ;; Defined at:
   556 ;;		line 1390 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
   559 ;;		 -> NULL(0), 
   560 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
   561 ;;		 -> STR_2(13), STR_1(7), 
   562 ;;  ap              2   84[COMRAM] PTR PTR void 
   563 ;;		 -> printf@ap(2), 
   564 ;; Auto vars:     Size  Location     Type
   565 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
   566 ;;		 -> STR_2(13), STR_1(7), 
   567 ;; Return value:  Size  Location     Type
   568 ;;                  2   80[COMRAM] int 
   569 ;; Registers used:
   570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   576 ;;      Params:         6       0       0       0       0       0       0       0       0
   577 ;;      Locals:         2       0       0       0       0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0       0       0       0       0
   579 ;;      Totals:         8       0       0       0       0       0       0       0       0
   580 ;;Total ram usage:        8 bytes
   581 ;; Hardware stack levels used: 1
   582 ;; Hardware stack levels required when called: 6
   583 ;; This function calls:
   584 ;;		_vfpfcnvrt
   585 ;; This function is called by:
   586 ;;		_printf
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text2
   591  00116C                     __ptext2:
   592                           	callstack 0
   593  00116C                     _vfprintf:
   594                           	callstack 23
   595  00116C                     
   596                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1390: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.35/pic/sources/c99/
      +                          common/doprnt.c: 1391: {;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt
      +                          .c: 1393:     char *cfmt;;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprn
      +                          t.c: 1395:     cfmt = (char *)fmt;
   597  00116C  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
   598  001170  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   599  001174                     
   600                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1396:     nout = 0;
   601  001174  0E00               	movlw	0
   602  001176  0100               	movlb	0	; () banked
   603  001178  6F61               	movwf	(_nout+1)& (0+255),b
   604  00117A  0E00               	movlw	0
   605  00117C  6F60               	movwf	_nout& (0+255),b
   606                           
   607                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1397:     while (*cf
      +                          mt) {
   608  00117E  EFD4  F008         	goto	l1350
   609  001182                     l1348:
   610                           
   611                           ; BSR set to: 0
   612                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1398:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
   613  001182  C051  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
   614  001186  C052  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   615  00118A  0E57               	movlw	low vfprintf@cfmt
   616  00118C  6E43               	movwf	vfpfcnvrt@fmt^0,c
   617  00118E  0E00               	movlw	high vfprintf@cfmt
   618  001190  6E44               	movwf	(vfpfcnvrt@fmt+1)^0,c
   619  001192  C055  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
   620  001196  C056  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   621  00119A  EC7C  F005         	call	_vfpfcnvrt	;wreg free
   622  00119E  5041               	movf	?_vfpfcnvrt^0,w,c
   623  0011A0  0100               	movlb	0	; () banked
   624  0011A2  2760               	addwf	_nout& (0+255),f,b
   625  0011A4  5042               	movf	(?_vfpfcnvrt+1)^0,w,c
   626  0011A6  2361               	addwfc	(_nout+1)& (0+255),f,b
   627  0011A8                     l1350:
   628                           
   629                           ; BSR set to: 0
   630                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1397:     while (*cf
      +                          mt) {
   631  0011A8  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
   632  0011AC  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   633  0011B0                     	if	0	;tblptru may be non-zero
   634  0011B0                     	endif
   635  0011B0                     	if	0	;tblptru may be non-zero
   636  0011B0                     	endif
   637  0011B0  0008               	tblrd		*
   638  0011B2  50F5               	movf	tablat,w,c
   639  0011B4  0900               	iorlw	0
   640  0011B6  A4D8               	btfss	status,2,c
   641  0011B8  EFE0  F008         	goto	u921
   642  0011BC  EFE2  F008         	goto	u920
   643  0011C0                     u921:
   644  0011C0  EFC1  F008         	goto	l1348
   645  0011C4                     u920:
   646  0011C4                     
   647                           ; BSR set to: 0
   648                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1400:     return nou
      +                          t;
   649  0011C4  C060  F051         	movff	_nout,?_vfprintf
   650  0011C8  C061  F052         	movff	_nout+1,?_vfprintf+1
   651  0011CC                     
   652                           ; BSR set to: 0
   653  0011CC  0012               	return		;funcret
   654  0011CE                     __end_of_vfprintf:
   655                           	callstack 0
   656                           
   657 ;; *************** function _vfpfcnvrt *****************
   658 ;; Defined at:
   659 ;;		line 692 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
   662 ;;		 -> NULL(0), 
   663 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
   664 ;;		 -> vfprintf@cfmt(2), 
   665 ;;  ap              2   68[COMRAM] PTR PTR void 
   666 ;;		 -> printf@ap(2), 
   667 ;; Auto vars:     Size  Location     Type
   668 ;;  ll              8   72[COMRAM] long long 
   669 ;;  llu             8    0        unsigned long long 
   670 ;;  f               4    0        unsigned long long 
   671 ;;  vp              3    0        PTR void 
   672 ;;  ct              3    0        unsigned char [3]
   673 ;;  cp              3    0        PTR unsigned char 
   674 ;;  i               2    0        int 
   675 ;;  done            2    0        int 
   676 ;;  c               1    0        unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  2   64[COMRAM] int 
   679 ;; Registers used:
   680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   686 ;;      Params:         6       0       0       0       0       0       0       0       0
   687 ;;      Locals:         8       0       0       0       0       0       0       0       0
   688 ;;      Temps:          2       0       0       0       0       0       0       0       0
   689 ;;      Totals:        16       0       0       0       0       0       0       0       0
   690 ;;Total ram usage:       16 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 5
   693 ;; This function calls:
   694 ;;		_dtoa
   695 ;;		_fputc
   696 ;; This function is called by:
   697 ;;		_vfprintf
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           	psect	text3
   702  000AF8                     __ptext3:
   703                           	callstack 0
   704  000AF8                     _vfpfcnvrt:
   705                           	callstack 23
   706  000AF8                     
   707                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 692: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.35/pic/sources/c
      +                          99/common/doprnt.c: 693: {;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/dopr
      +                          nt.c: 694:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.35/pic/sources/c99/com
      +                          mon/doprnt.c: 695:     int done, i;;/Applications/microchip/xc8/v2.35/pic/sources/c99/co
      +                          mmon/doprnt.c: 696:     long long ll;;/Applications/microchip/xc8/v2.35/pic/sources/c99/
      +                          common/doprnt.c: 697:     unsigned long long llu;
   708  000AF8  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   709  000AFC  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   710  000B00  CFDE FFF6          	movff	postinc2,tblptrl
   711  000B04  CFDD FFF7          	movff	postdec2,tblptrh
   712  000B08                     	if	0	;tblptru may be non-zero
   713  000B08                     	endif
   714  000B08                     	if	0	;tblptru may be non-zero
   715  000B08                     	endif
   716  000B08  0008               	tblrd		*
   717  000B0A  50F5               	movf	tablat,w,c
   718  000B0C  0A25               	xorlw	37
   719  000B0E  A4D8               	btfss	status,2,c
   720  000B10  EF8C  F005         	goto	u881
   721  000B14  EF8E  F005         	goto	u880
   722  000B18                     u881:
   723  000B18  EF3A  F006         	goto	l1336
   724  000B1C                     u880:
   725  000B1C                     
   726                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 703:         ++*fmt;
   727  000B1C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   728  000B20  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   729  000B24  2ADE               	incf	postinc2,f,c
   730  000B26  0E00               	movlw	0
   731  000B28  22DD               	addwfc	postdec2,f,c
   732  000B2A                     
   733                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 705:         flags =
      +                           width = 0;
   734  000B2A  0E00               	movlw	0
   735  000B2C  0100               	movlb	0	; () banked
   736  000B2E  6F63               	movwf	(_width+1)& (0+255),b
   737  000B30  0E00               	movlw	0
   738  000B32  6F62               	movwf	_width& (0+255),b
   739  000B34  C062  F066         	movff	_width,_flags
   740  000B38  C063  F067         	movff	_width+1,_flags+1
   741  000B3C                     
   742                           ; BSR set to: 0
   743                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 706:         prec = 
      +                          -1;
   744  000B3C  6964               	setf	_prec& (0+255),b
   745  000B3E  6965               	setf	(_prec+1)& (0+255),b
   746  000B40                     
   747                           ; BSR set to: 0
   748                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 847:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
   749  000B40  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   750  000B44  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   751  000B48  CFDE FFF6          	movff	postinc2,tblptrl
   752  000B4C  CFDD FFF7          	movff	postdec2,tblptrh
   753  000B50                     	if	0	;tblptru may be non-zero
   754  000B50                     	endif
   755  000B50                     	if	0	;tblptru may be non-zero
   756  000B50                     	endif
   757  000B50  0008               	tblrd		*
   758  000B52  50F5               	movf	tablat,w,c
   759  000B54  0A64               	xorlw	100
   760  000B56  B4D8               	btfsc	status,2,c
   761  000B58  EFB0  F005         	goto	u891
   762  000B5C  EFB2  F005         	goto	u890
   763  000B60                     u891:
   764  000B60  EFC4  F005         	goto	l1314
   765  000B64                     u890:
   766  000B64                     
   767                           ; BSR set to: 0
   768  000B64  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   769  000B68  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   770  000B6C  CFDE FFF6          	movff	postinc2,tblptrl
   771  000B70  CFDD FFF7          	movff	postdec2,tblptrh
   772  000B74                     	if	0	;tblptru may be non-zero
   773  000B74                     	endif
   774  000B74                     	if	0	;tblptru may be non-zero
   775  000B74                     	endif
   776  000B74  0008               	tblrd		*
   777  000B76  50F5               	movf	tablat,w,c
   778  000B78  0A69               	xorlw	105
   779  000B7A  A4D8               	btfss	status,2,c
   780  000B7C  EFC2  F005         	goto	u901
   781  000B80  EFC4  F005         	goto	u900
   782  000B84                     u901:
   783  000B84  EF04  F006         	goto	l1320
   784  000B88                     u900:
   785  000B88                     l1314:
   786                           
   787                           ; BSR set to: 0
   788                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 849:             ++*
      +                          fmt;
   789  000B88  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   790  000B8C  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   791  000B90  2ADE               	incf	postinc2,f,c
   792  000B92  0E00               	movlw	0
   793  000B94  22DD               	addwfc	postdec2,f,c
   794                           
   795                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 850:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   796  000B96  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   797  000B9A  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   798  000B9E  CFDF F047          	movff	indf2,??_vfpfcnvrt
   799  000BA2  0E02               	movlw	2
   800  000BA4  26DE               	addwf	postinc2,f,c
   801  000BA6  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
   802  000BAA  0E00               	movlw	0
   803  000BAC  22DD               	addwfc	postdec2,f,c
   804  000BAE  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
   805  000BB2  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   806  000BB6  CFDE F049          	movff	postinc2,vfpfcnvrt@ll
   807  000BBA  CFDD F04A          	movff	postdec2,vfpfcnvrt@ll+1
   808  000BBE  0E00               	movlw	0
   809  000BC0  BE4A               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   810  000BC2  0EFF               	movlw	-1
   811  000BC4  6E4B               	movwf	(vfpfcnvrt@ll+2)^0,c
   812  000BC6  6E4C               	movwf	(vfpfcnvrt@ll+3)^0,c
   813  000BC8  6E4D               	movwf	(vfpfcnvrt@ll+4)^0,c
   814  000BCA  6E4E               	movwf	(vfpfcnvrt@ll+5)^0,c
   815  000BCC  6E4F               	movwf	(vfpfcnvrt@ll+6)^0,c
   816  000BCE  6E50               	movwf	(vfpfcnvrt@ll+7)^0,c
   817  000BD0                     
   818                           ; BSR set to: 0
   819                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 852:             ret
      +                          urn dtoa(fp, ll);
   820  000BD0  C041  F01D         	movff	vfpfcnvrt@fp,dtoa@fp
   821  000BD4  C042  F01E         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   822  000BD8  C049  F01F         	movff	vfpfcnvrt@ll,dtoa@d
   823  000BDC  C04A  F020         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   824  000BE0  C04B  F021         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   825  000BE4  C04C  F022         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   826  000BE8  C04D  F023         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   827  000BEC  C04E  F024         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   828  000BF0  C04F  F025         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   829  000BF4  C050  F026         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   830  000BF8  EC0B  F004         	call	_dtoa	;wreg free
   831  000BFC  C01D  F041         	movff	?_dtoa,?_vfpfcnvrt
   832  000C00  C01E  F042         	movff	?_dtoa+1,?_vfpfcnvrt+1
   833  000C04  EF55  F006         	goto	l782
   834  000C08                     l1320:
   835                           
   836                           ; BSR set to: 0
   837                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1372:         if ((*
      +                          fmt)[0] == '%') {
   838  000C08  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   839  000C0C  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   840  000C10  CFDE FFF6          	movff	postinc2,tblptrl
   841  000C14  CFDD FFF7          	movff	postdec2,tblptrh
   842  000C18                     	if	0	;tblptru may be non-zero
   843  000C18                     	endif
   844  000C18                     	if	0	;tblptru may be non-zero
   845  000C18                     	endif
   846  000C18  0008               	tblrd		*
   847  000C1A  50F5               	movf	tablat,w,c
   848  000C1C  0A25               	xorlw	37
   849  000C1E  A4D8               	btfss	status,2,c
   850  000C20  EF14  F006         	goto	u911
   851  000C24  EF16  F006         	goto	u910
   852  000C28                     u911:
   853  000C28  EF2D  F006         	goto	l1330
   854  000C2C                     u910:
   855  000C2C                     
   856                           ; BSR set to: 0
   857                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1373:             ++
      +                          *fmt;
   858  000C2C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   859  000C30  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   860  000C34  2ADE               	incf	postinc2,f,c
   861  000C36  0E00               	movlw	0
   862  000C38  22DD               	addwfc	postdec2,f,c
   863  000C3A                     
   864                           ; BSR set to: 0
   865                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1374:             fp
      +                          utc((int)'%', fp);
   866  000C3A  0E00               	movlw	0
   867  000C3C  6E03               	movwf	(fputc@c+1)^0,c
   868  000C3E  0E25               	movlw	37
   869  000C40  6E02               	movwf	fputc@c^0,c
   870  000C42  C041  F004         	movff	vfpfcnvrt@fp,fputc@fp
   871  000C46  C042  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   872  000C4A  EC2F  F008         	call	_fputc	;wreg free
   873  000C4E                     l1326:
   874                           
   875                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1375:             re
      +                          turn 1;
   876  000C4E  0E00               	movlw	0
   877  000C50  6E42               	movwf	(?_vfpfcnvrt+1)^0,c
   878  000C52  0E01               	movlw	1
   879  000C54  6E41               	movwf	?_vfpfcnvrt^0,c
   880  000C56  EF55  F006         	goto	l782
   881  000C5A                     l1330:
   882                           
   883                           ; BSR set to: 0
   884                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1379:         ++*fmt
      +                          ;
   885  000C5A  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   886  000C5E  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   887  000C62  2ADE               	incf	postinc2,f,c
   888  000C64  0E00               	movlw	0
   889  000C66  22DD               	addwfc	postdec2,f,c
   890  000C68                     
   891                           ; BSR set to: 0
   892                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1380:         return
      +                           0;
   893  000C68  0E00               	movlw	0
   894  000C6A  6E42               	movwf	(?_vfpfcnvrt+1)^0,c
   895  000C6C  0E00               	movlw	0
   896  000C6E  6E41               	movwf	?_vfpfcnvrt^0,c
   897  000C70  EF55  F006         	goto	l782
   898  000C74                     l1336:
   899                           
   900                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1384:     fputc((int
      +                          )(*fmt)[0], fp);
   901  000C74  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   902  000C78  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   903  000C7C  CFDE FFF6          	movff	postinc2,tblptrl
   904  000C80  CFDD FFF7          	movff	postdec2,tblptrh
   905  000C84                     	if	0	;tblptru may be non-zero
   906  000C84                     	endif
   907  000C84                     	if	0	;tblptru may be non-zero
   908  000C84                     	endif
   909  000C84  0008               	tblrd		*
   910  000C86  50F5               	movf	tablat,w,c
   911  000C88  6E02               	movwf	fputc@c^0,c
   912  000C8A  6A03               	clrf	(fputc@c+1)^0,c
   913  000C8C  C041  F004         	movff	vfpfcnvrt@fp,fputc@fp
   914  000C90  C042  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   915  000C94  EC2F  F008         	call	_fputc	;wreg free
   916  000C98                     
   917                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 1385:     ++*fmt;
   918  000C98  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   919  000C9C  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   920  000CA0  2ADE               	incf	postinc2,f,c
   921  000CA2  0E00               	movlw	0
   922  000CA4  22DD               	addwfc	postdec2,f,c
   923  000CA6  EF27  F006         	goto	l1326
   924  000CAA                     l782:
   925  000CAA  0012               	return		;funcret
   926  000CAC                     __end_of_vfpfcnvrt:
   927                           	callstack 0
   928                           
   929 ;; *************** function _dtoa *****************
   930 ;; Defined at:
   931 ;;		line 287 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;  fp              2   28[COMRAM] PTR struct _IO_FILE
   934 ;;		 -> NULL(0), 
   935 ;;  d               8   30[COMRAM] long long 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  n               8   54[COMRAM] long long 
   938 ;;  i               2   62[COMRAM] int 
   939 ;;  s               2   52[COMRAM] int 
   940 ;;  w               2   50[COMRAM] int 
   941 ;;  p               2   48[COMRAM] int 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  2   28[COMRAM] int 
   944 ;; Registers used:
   945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   951 ;;      Params:        10       0       0       0       0       0       0       0       0
   952 ;;      Locals:        18       0       0       0       0       0       0       0       0
   953 ;;      Temps:          8       0       0       0       0       0       0       0       0
   954 ;;      Totals:        36       0       0       0       0       0       0       0       0
   955 ;;Total ram usage:       36 bytes
   956 ;; Hardware stack levels used: 1
   957 ;; Hardware stack levels required when called: 4
   958 ;; This function calls:
   959 ;;		___aodiv
   960 ;;		___aomod
   961 ;;		_abs
   962 ;;		_pad
   963 ;; This function is called by:
   964 ;;		_vfpfcnvrt
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           	psect	text4
   969  000816                     __ptext4:
   970                           	callstack 0
   971  000816                     _dtoa:
   972                           	callstack 23
   973  000816                     
   974                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 287: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.
      +                          c: 288: {;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 289:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 290:   
      +                            long long n;;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 293:  
      +                             n = d;
   975  000816  C01F  F037         	movff	dtoa@d,dtoa@n
   976  00081A  C020  F038         	movff	dtoa@d+1,dtoa@n+1
   977  00081E  C021  F039         	movff	dtoa@d+2,dtoa@n+2
   978  000822  C022  F03A         	movff	dtoa@d+3,dtoa@n+3
   979  000826  C023  F03B         	movff	dtoa@d+4,dtoa@n+4
   980  00082A  C024  F03C         	movff	dtoa@d+5,dtoa@n+5
   981  00082E  C025  F03D         	movff	dtoa@d+6,dtoa@n+6
   982  000832  C026  F03E         	movff	dtoa@d+7,dtoa@n+7
   983  000836                     
   984                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 294:     s = n < 0 ?
      +                           1 : 0;
   985  000836  BE3E               	btfsc	(dtoa@n+7)^0,7,c
   986  000838  EF20  F004         	goto	u731
   987  00083C  EF23  F004         	goto	u730
   988  000840                     u731:
   989  000840  0E01               	movlw	1
   990  000842  EF24  F004         	goto	u740
   991  000846                     u730:
   992  000846  0E00               	movlw	0
   993  000848                     u740:
   994  000848  6E35               	movwf	dtoa@s^0,c
   995  00084A  6A36               	clrf	(dtoa@s+1)^0,c
   996                           
   997                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 295:     if (s) {
   998  00084C  5035               	movf	dtoa@s^0,w,c
   999  00084E  1036               	iorwf	(dtoa@s+1)^0,w,c
  1000  000850  B4D8               	btfsc	status,2,c
  1001  000852  EF2D  F004         	goto	u751
  1002  000856  EF2F  F004         	goto	u750
  1003  00085A                     u751:
  1004  00085A  EF3F  F004         	goto	l1246
  1005  00085E                     u750:
  1006  00085E                     
  1007                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 296:         n = -n;
  1008  00085E  1E3E               	comf	(dtoa@n+7)^0,f,c
  1009  000860  1E3D               	comf	(dtoa@n+6)^0,f,c
  1010  000862  1E3C               	comf	(dtoa@n+5)^0,f,c
  1011  000864  1E3B               	comf	(dtoa@n+4)^0,f,c
  1012  000866  1E3A               	comf	(dtoa@n+3)^0,f,c
  1013  000868  1E39               	comf	(dtoa@n+2)^0,f,c
  1014  00086A  1E38               	comf	(dtoa@n+1)^0,f,c
  1015  00086C  6C37               	negf	dtoa@n^0,c
  1016  00086E  0E00               	movlw	0
  1017  000870  2238               	addwfc	(dtoa@n+1)^0,f,c
  1018  000872  2239               	addwfc	(dtoa@n+2)^0,f,c
  1019  000874  223A               	addwfc	(dtoa@n+3)^0,f,c
  1020  000876  223B               	addwfc	(dtoa@n+4)^0,f,c
  1021  000878  223C               	addwfc	(dtoa@n+5)^0,f,c
  1022  00087A  223D               	addwfc	(dtoa@n+6)^0,f,c
  1023  00087C  223E               	addwfc	(dtoa@n+7)^0,f,c
  1024  00087E                     l1246:
  1025                           
  1026                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 300:     if (!(prec 
      +                          < 0)) {
  1027  00087E  0100               	movlb	0	; () banked
  1028  000880  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1029  000882  EF45  F004         	goto	u761
  1030  000886  EF47  F004         	goto	u760
  1031  00088A                     u761:
  1032  00088A  EF48  F004         	goto	l1250
  1033  00088E                     u760:
  1034  00088E                     
  1035                           ; BSR set to: 0
  1036                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 301:         flags &
      +                          = ~(1 << 1);
  1037  00088E  9366               	bcf	_flags& (0+255),1,b
  1038  000890                     l1250:
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 303:     p = (0 < pr
      +                          ec) ? prec : 1;
  1042  000890  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1043  000892  EF55  F004         	goto	u770
  1044  000896  5165               	movf	(_prec+1)& (0+255),w,b
  1045  000898  E106               	bnz	u771
  1046  00089A  0564               	decf	_prec& (0+255),w,b
  1047  00089C  B0D8               	btfsc	status,0,c
  1048  00089E  EF53  F004         	goto	u771
  1049  0008A2  EF55  F004         	goto	u770
  1050  0008A6                     u771:
  1051  0008A6  EF5B  F004         	goto	l755
  1052  0008AA                     u770:
  1053  0008AA                     
  1054                           ; BSR set to: 0
  1055  0008AA  0E00               	movlw	0
  1056  0008AC  6E32               	movwf	(dtoa@p+1)^0,c
  1057  0008AE  0E01               	movlw	1
  1058  0008B0  6E31               	movwf	dtoa@p^0,c
  1059  0008B2  EF5F  F004         	goto	l757
  1060  0008B6                     l755:
  1061                           
  1062                           ; BSR set to: 0
  1063  0008B6  C064  F031         	movff	_prec,dtoa@p
  1064  0008BA  C065  F032         	movff	_prec+1,dtoa@p+1
  1065  0008BE                     l757:
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 304:     w = width;
  1069  0008BE  C062  F033         	movff	_width,dtoa@w
  1070  0008C2  C063  F034         	movff	_width+1,dtoa@w+1
  1071  0008C6                     
  1072                           ; BSR set to: 0
  1073                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 305:     if (s || (f
      +                          lags & (1 << 2))) {
  1074  0008C6  5035               	movf	dtoa@s^0,w,c
  1075  0008C8  1036               	iorwf	(dtoa@s+1)^0,w,c
  1076  0008CA  A4D8               	btfss	status,2,c
  1077  0008CC  EF6A  F004         	goto	u781
  1078  0008D0  EF6C  F004         	goto	u780
  1079  0008D4                     u781:
  1080  0008D4  EF73  F004         	goto	l1258
  1081  0008D8                     u780:
  1082  0008D8                     
  1083                           ; BSR set to: 0
  1084  0008D8  A566               	btfss	_flags& (0+255),2,b
  1085  0008DA  EF71  F004         	goto	u791
  1086  0008DE  EF73  F004         	goto	u790
  1087  0008E2                     u791:
  1088  0008E2  EF76  F004         	goto	l1260
  1089  0008E6                     u790:
  1090  0008E6                     l1258:
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 306:         --w;
  1094  0008E6  0633               	decf	dtoa@w^0,f,c
  1095  0008E8  A0D8               	btfss	status,0,c
  1096  0008EA  0634               	decf	(dtoa@w+1)^0,f,c
  1097  0008EC                     l1260:
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 310:     i = sizeof(
      +                          dbuf) - 1;
  1101  0008EC  0E00               	movlw	0
  1102  0008EE  6E40               	movwf	(dtoa@i+1)^0,c
  1103  0008F0  0E1F               	movlw	31
  1104  0008F2  6E3F               	movwf	dtoa@i^0,c
  1105  0008F4                     
  1106                           ; BSR set to: 0
  1107                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 311:     dbuf[i] = '
      +                          \0';
  1108  0008F4  0E00               	movlw	0
  1109  0008F6  6F87               	movwf	(_dbuf+31)& (0+255),b
  1110                           
  1111                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 312:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1112  0008F8  EFFA  F004         	goto	l1274
  1113  0008FC                     l1264:
  1114                           
  1115                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 313:         --i;
  1116  0008FC  063F               	decf	dtoa@i^0,f,c
  1117  0008FE  A0D8               	btfss	status,0,c
  1118  000900  0640               	decf	(dtoa@i+1)^0,f,c
  1119  000902                     
  1120                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 314:         dbuf[i]
      +                           = (char)((int)'0' + abs(n % 10));
  1121  000902  0E68               	movlw	low _dbuf
  1122  000904  243F               	addwf	dtoa@i^0,w,c
  1123  000906  6ED9               	movwf	fsr2l,c
  1124  000908  0E00               	movlw	high _dbuf
  1125  00090A  2040               	addwfc	(dtoa@i+1)^0,w,c
  1126  00090C  6EDA               	movwf	fsr2h,c
  1127  00090E  C037  F001         	movff	dtoa@n,___aomod@dividend
  1128  000912  C038  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1129  000916  C039  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1130  00091A  C03A  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1131  00091E  C03B  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1132  000922  C03C  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1133  000926  C03D  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1134  00092A  C03E  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1135  00092E  0E0A               	movlw	10
  1136  000930  6E09               	movwf	___aomod@divisor^0,c
  1137  000932  0E00               	movlw	0
  1138  000934  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1139  000936  0E00               	movlw	0
  1140  000938  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1141  00093A  0E00               	movlw	0
  1142  00093C  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1143  00093E  0E00               	movlw	0
  1144  000940  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1145  000942  0E00               	movlw	0
  1146  000944  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1147  000946  0E00               	movlw	0
  1148  000948  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1149  00094A  0E00               	movlw	0
  1150  00094C  6E10               	movwf	(___aomod@divisor+7)^0,c
  1151  00094E  EC1A  F007         	call	___aomod	;wreg free
  1152  000952  C001  F027         	movff	?___aomod,??_dtoa
  1153  000956  C002  F028         	movff	?___aomod+1,??_dtoa+1
  1154  00095A  C003  F029         	movff	?___aomod+2,??_dtoa+2
  1155  00095E  C004  F02A         	movff	?___aomod+3,??_dtoa+3
  1156  000962  C005  F02B         	movff	?___aomod+4,??_dtoa+4
  1157  000966  C006  F02C         	movff	?___aomod+5,??_dtoa+5
  1158  00096A  C007  F02D         	movff	?___aomod+6,??_dtoa+6
  1159  00096E  C008  F02E         	movff	?___aomod+7,??_dtoa+7
  1160  000972  C027  F013         	movff	??_dtoa,abs@a
  1161  000976  C029  F014         	movff	??_dtoa+2,abs@a+1
  1162  00097A  EC09  F009         	call	_abs	;wreg free
  1163  00097E  5013               	movf	?_abs^0,w,c
  1164  000980  0F30               	addlw	48
  1165  000982  6EDF               	movwf	indf2,c
  1166  000984                     
  1167                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 315:         --p;
  1168  000984  0631               	decf	dtoa@p^0,f,c
  1169  000986  A0D8               	btfss	status,0,c
  1170  000988  0632               	decf	(dtoa@p+1)^0,f,c
  1171  00098A                     
  1172                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 316:         --w;
  1173  00098A  0633               	decf	dtoa@w^0,f,c
  1174  00098C  A0D8               	btfss	status,0,c
  1175  00098E  0634               	decf	(dtoa@w+1)^0,f,c
  1176  000990                     
  1177                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 317:         n = n /
      +                           10;
  1178  000990  C037  F001         	movff	dtoa@n,___aodiv@dividend
  1179  000994  C038  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1180  000998  C039  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1181  00099C  C03A  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1182  0009A0  C03B  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1183  0009A4  C03C  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1184  0009A8  C03D  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1185  0009AC  C03E  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1186  0009B0  0E0A               	movlw	10
  1187  0009B2  6E09               	movwf	___aodiv@divisor^0,c
  1188  0009B4  0E00               	movlw	0
  1189  0009B6  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1190  0009B8  0E00               	movlw	0
  1191  0009BA  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1192  0009BC  0E00               	movlw	0
  1193  0009BE  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1194  0009C0  0E00               	movlw	0
  1195  0009C2  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1196  0009C4  0E00               	movlw	0
  1197  0009C6  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1198  0009C8  0E00               	movlw	0
  1199  0009CA  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1200  0009CC  0E00               	movlw	0
  1201  0009CE  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1202  0009D0  EC56  F006         	call	___aodiv	;wreg free
  1203  0009D4  C001  F037         	movff	?___aodiv,dtoa@n
  1204  0009D8  C002  F038         	movff	?___aodiv+1,dtoa@n+1
  1205  0009DC  C003  F039         	movff	?___aodiv+2,dtoa@n+2
  1206  0009E0  C004  F03A         	movff	?___aodiv+3,dtoa@n+3
  1207  0009E4  C005  F03B         	movff	?___aodiv+4,dtoa@n+4
  1208  0009E8  C006  F03C         	movff	?___aodiv+5,dtoa@n+5
  1209  0009EC  C007  F03D         	movff	?___aodiv+6,dtoa@n+6
  1210  0009F0  C008  F03E         	movff	?___aodiv+7,dtoa@n+7
  1211  0009F4                     l1274:
  1212                           
  1213                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 312:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1214  0009F4  BE40               	btfsc	(dtoa@i+1)^0,7,c
  1215  0009F6  EF05  F005         	goto	u801
  1216  0009FA  5040               	movf	(dtoa@i+1)^0,w,c
  1217  0009FC  E108               	bnz	u800
  1218  0009FE  043F               	decf	dtoa@i^0,w,c
  1219  000A00  A0D8               	btfss	status,0,c
  1220  000A02  EF05  F005         	goto	u801
  1221  000A06  EF07  F005         	goto	u800
  1222  000A0A                     u801:
  1223  000A0A  EF38  F005         	goto	l1284
  1224  000A0E                     u800:
  1225  000A0E  5037               	movf	dtoa@n^0,w,c
  1226  000A10  1038               	iorwf	(dtoa@n+1)^0,w,c
  1227  000A12  1039               	iorwf	(dtoa@n+2)^0,w,c
  1228  000A14  103A               	iorwf	(dtoa@n+3)^0,w,c
  1229  000A16  103B               	iorwf	(dtoa@n+4)^0,w,c
  1230  000A18  103C               	iorwf	(dtoa@n+5)^0,w,c
  1231  000A1A  103D               	iorwf	(dtoa@n+6)^0,w,c
  1232  000A1C  103E               	iorwf	(dtoa@n+7)^0,w,c
  1233  000A1E  A4D8               	btfss	status,2,c
  1234  000A20  EF14  F005         	goto	u811
  1235  000A24  EF16  F005         	goto	u810
  1236  000A28                     u811:
  1237  000A28  EF7E  F004         	goto	l1264
  1238  000A2C                     u810:
  1239  000A2C  BE32               	btfsc	(dtoa@p+1)^0,7,c
  1240  000A2E  EF23  F005         	goto	u820
  1241  000A32  5032               	movf	(dtoa@p+1)^0,w,c
  1242  000A34  E106               	bnz	u821
  1243  000A36  0431               	decf	dtoa@p^0,w,c
  1244  000A38  B0D8               	btfsc	status,0,c
  1245  000A3A  EF21  F005         	goto	u821
  1246  000A3E  EF23  F005         	goto	u820
  1247  000A42                     u821:
  1248  000A42  EF7E  F004         	goto	l1264
  1249  000A46                     u820:
  1250  000A46  BE34               	btfsc	(dtoa@w+1)^0,7,c
  1251  000A48  EF2E  F005         	goto	u831
  1252  000A4C  5034               	movf	(dtoa@w+1)^0,w,c
  1253  000A4E  E108               	bnz	u830
  1254  000A50  0433               	decf	dtoa@w^0,w,c
  1255  000A52  A0D8               	btfss	status,0,c
  1256  000A54  EF2E  F005         	goto	u831
  1257  000A58  EF30  F005         	goto	u830
  1258  000A5C                     u831:
  1259  000A5C  EF38  F005         	goto	l1284
  1260  000A60                     u830:
  1261  000A60  0100               	movlb	0	; () banked
  1262  000A62  B366               	btfsc	_flags& (0+255),1,b
  1263  000A64  EF36  F005         	goto	u841
  1264  000A68  EF38  F005         	goto	u840
  1265  000A6C                     u841:
  1266  000A6C  EF7E  F004         	goto	l1264
  1267  000A70                     u840:
  1268  000A70                     l1284:
  1269                           
  1270                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 321:     if (s || (f
      +                          lags & (1 << 2))) {
  1271  000A70  5035               	movf	dtoa@s^0,w,c
  1272  000A72  1036               	iorwf	(dtoa@s+1)^0,w,c
  1273  000A74  A4D8               	btfss	status,2,c
  1274  000A76  EF3F  F005         	goto	u851
  1275  000A7A  EF41  F005         	goto	u850
  1276  000A7E                     u851:
  1277  000A7E  EF49  F005         	goto	l1288
  1278  000A82                     u850:
  1279  000A82  0100               	movlb	0	; () banked
  1280  000A84  A566               	btfss	_flags& (0+255),2,b
  1281  000A86  EF47  F005         	goto	u861
  1282  000A8A  EF49  F005         	goto	u860
  1283  000A8E                     u861:
  1284  000A8E  EF67  F005         	goto	l1298
  1285  000A92                     u860:
  1286  000A92                     l1288:
  1287                           
  1288                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 322:         --i;
  1289  000A92  063F               	decf	dtoa@i^0,f,c
  1290  000A94  A0D8               	btfss	status,0,c
  1291  000A96  0640               	decf	(dtoa@i+1)^0,f,c
  1292  000A98                     
  1293                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 323:         dbuf[i]
      +                           = s ? '-' : '+';
  1294  000A98  5035               	movf	dtoa@s^0,w,c
  1295  000A9A  1036               	iorwf	(dtoa@s+1)^0,w,c
  1296  000A9C  A4D8               	btfss	status,2,c
  1297  000A9E  EF53  F005         	goto	u871
  1298  000AA2  EF55  F005         	goto	u870
  1299  000AA6                     u871:
  1300  000AA6  EF5B  F005         	goto	l1294
  1301  000AAA                     u870:
  1302  000AAA  0E00               	movlw	0
  1303  000AAC  6E30               	movwf	(_dtoa$635+1)^0,c
  1304  000AAE  0E2B               	movlw	43
  1305  000AB0  6E2F               	movwf	_dtoa$635^0,c
  1306  000AB2  EF5F  F005         	goto	l1296
  1307  000AB6                     l1294:
  1308  000AB6  0E00               	movlw	0
  1309  000AB8  6E30               	movwf	(_dtoa$635+1)^0,c
  1310  000ABA  0E2D               	movlw	45
  1311  000ABC  6E2F               	movwf	_dtoa$635^0,c
  1312  000ABE                     l1296:
  1313  000ABE  0E68               	movlw	low _dbuf
  1314  000AC0  243F               	addwf	dtoa@i^0,w,c
  1315  000AC2  6ED9               	movwf	fsr2l,c
  1316  000AC4  0E00               	movlw	high _dbuf
  1317  000AC6  2040               	addwfc	(dtoa@i+1)^0,w,c
  1318  000AC8  6EDA               	movwf	fsr2h,c
  1319  000ACA  C02F  FFDF         	movff	_dtoa$635,indf2
  1320  000ACE                     l1298:
  1321                           
  1322                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 327:     return pad(
      +                          fp, &dbuf[i], w);
  1323  000ACE  C01D  F012         	movff	dtoa@fp,pad@fp
  1324  000AD2  C01E  F013         	movff	dtoa@fp+1,pad@fp+1
  1325  000AD6  0E68               	movlw	low _dbuf
  1326  000AD8  243F               	addwf	dtoa@i^0,w,c
  1327  000ADA  6E14               	movwf	pad@buf^0,c
  1328  000ADC  0E00               	movlw	high _dbuf
  1329  000ADE  2040               	addwfc	(dtoa@i+1)^0,w,c
  1330  000AE0  6E15               	movwf	(pad@buf+1)^0,c
  1331  000AE2  C033  F016         	movff	dtoa@w,pad@p
  1332  000AE6  C034  F017         	movff	dtoa@w+1,pad@p+1
  1333  000AEA  ECCC  F007         	call	_pad	;wreg free
  1334  000AEE  C012  F01D         	movff	?_pad,?_dtoa
  1335  000AF2  C013  F01E         	movff	?_pad+1,?_dtoa+1
  1336  000AF6  0012               	return		;funcret
  1337  000AF8                     __end_of_dtoa:
  1338                           	callstack 0
  1339                           
  1340 ;; *************** function _pad *****************
  1341 ;; Defined at:
  1342 ;;		line 72 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  1345 ;;		 -> NULL(0), 
  1346 ;;  buf             2   19[COMRAM] PTR unsigned char 
  1347 ;;		 -> dbuf(32), 
  1348 ;;  p               2   21[COMRAM] int 
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  w               2   26[COMRAM] int 
  1351 ;;  i               2   24[COMRAM] int 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  2   17[COMRAM] int 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1361 ;;      Params:         6       0       0       0       0       0       0       0       0
  1362 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1363 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1364 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1365 ;;Total ram usage:       11 bytes
  1366 ;; Hardware stack levels used: 1
  1367 ;; Hardware stack levels required when called: 3
  1368 ;; This function calls:
  1369 ;;		_fputc
  1370 ;;		_fputs
  1371 ;;		_strlen
  1372 ;; This function is called by:
  1373 ;;		_dtoa
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text5
  1378  000F98                     __ptext5:
  1379                           	callstack 0
  1380  000F98                     _pad:
  1381                           	callstack 23
  1382  000F98                     
  1383                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.35/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  1384  000F98  0100               	movlb	0	; () banked
  1385  000F9A  A166               	btfss	_flags& (0+255),0,b
  1386  000F9C  EFD2  F007         	goto	u681
  1387  000FA0  EFD4  F007         	goto	u680
  1388  000FA4                     u681:
  1389  000FA4  EFDE  F007         	goto	l1218
  1390  000FA8                     u680:
  1391  000FA8                     
  1392                           ; BSR set to: 0
  1393                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  1394  000FA8  C014  F00B         	movff	pad@buf,fputs@s
  1395  000FAC  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1396  000FB0  C012  F00D         	movff	pad@fp,fputs@fp
  1397  000FB4  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1398  000FB8  ECE7  F008         	call	_fputs	;wreg free
  1399  000FBC                     l1218:
  1400                           
  1401                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  1402  000FBC  BE17               	btfsc	(pad@p+1)^0,7,c
  1403  000FBE  EFE3  F007         	goto	u691
  1404  000FC2  EFE5  F007         	goto	u690
  1405  000FC6                     u691:
  1406  000FC6  EFEB  F007         	goto	l1222
  1407  000FCA                     u690:
  1408  000FCA  C016  F01B         	movff	pad@p,pad@w
  1409  000FCE  C017  F01C         	movff	pad@p+1,pad@w+1
  1410  000FD2  EFEF  F007         	goto	l744
  1411  000FD6                     l1222:
  1412  000FD6  0E00               	movlw	0
  1413  000FD8  6E1C               	movwf	(pad@w+1)^0,c
  1414  000FDA  0E00               	movlw	0
  1415  000FDC  6E1B               	movwf	pad@w^0,c
  1416  000FDE                     l744:
  1417                           
  1418                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  1419  000FDE  0E00               	movlw	0
  1420  000FE0  6E1A               	movwf	(pad@i+1)^0,c
  1421  000FE2  0E00               	movlw	0
  1422  000FE4  6E19               	movwf	pad@i^0,c
  1423                           
  1424                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  1425  000FE6  EF01  F008         	goto	l1228
  1426  000FEA                     l1224:
  1427                           
  1428                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  1429  000FEA  0E00               	movlw	0
  1430  000FEC  6E03               	movwf	(fputc@c+1)^0,c
  1431  000FEE  0E20               	movlw	32
  1432  000FF0  6E02               	movwf	fputc@c^0,c
  1433  000FF2  C012  F004         	movff	pad@fp,fputc@fp
  1434  000FF6  C013  F005         	movff	pad@fp+1,fputc@fp+1
  1435  000FFA  EC2F  F008         	call	_fputc	;wreg free
  1436  000FFE                     
  1437                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 86:         ++i;
  1438  000FFE  4A19               	infsnz	pad@i^0,f,c
  1439  001000  2A1A               	incf	(pad@i+1)^0,f,c
  1440  001002                     l1228:
  1441                           
  1442                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  1443  001002  501B               	movf	pad@w^0,w,c
  1444  001004  5C19               	subwf	pad@i^0,w,c
  1445  001006  501A               	movf	(pad@i+1)^0,w,c
  1446  001008  0A80               	xorlw	128
  1447  00100A  6E18               	movwf	??_pad^0,c
  1448  00100C  501C               	movf	(pad@w+1)^0,w,c
  1449  00100E  0A80               	xorlw	128
  1450  001010  5818               	subwfb	??_pad^0,w,c
  1451  001012  A0D8               	btfss	status,0,c
  1452  001014  EF0E  F008         	goto	u701
  1453  001018  EF10  F008         	goto	u700
  1454  00101C                     u701:
  1455  00101C  EFF5  F007         	goto	l1224
  1456  001020                     u700:
  1457  001020                     
  1458                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  1459  001020  0100               	movlb	0	; () banked
  1460  001022  B166               	btfsc	_flags& (0+255),0,b
  1461  001024  EF16  F008         	goto	u711
  1462  001028  EF18  F008         	goto	u710
  1463  00102C                     u711:
  1464  00102C  EF22  F008         	goto	l1232
  1465  001030                     u710:
  1466  001030                     
  1467                           ; BSR set to: 0
  1468                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  1469  001030  C014  F00B         	movff	pad@buf,fputs@s
  1470  001034  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1471  001038  C012  F00D         	movff	pad@fp,fputs@fp
  1472  00103C  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1473  001040  ECE7  F008         	call	_fputs	;wreg free
  1474  001044                     l1232:
  1475                           
  1476                           ;/Applications/microchip/xc8/v2.35/pic/sources/c99/common/doprnt.c: 94:     return (int)
      +                          (strlen(buf) + (size_t)w);
  1477  001044  C014  F001         	movff	pad@buf,strlen@s
  1478  001048  C015  F002         	movff	pad@buf+1,strlen@s+1
  1479  00104C  EC29  F009         	call	_strlen	;wreg free
  1480  001050  501B               	movf	pad@w^0,w,c
  1481  001052  2401               	addwf	?_strlen^0,w,c
  1482  001054  6E12               	movwf	?_pad^0,c
  1483  001056  501C               	movf	(pad@w+1)^0,w,c
  1484  001058  2002               	addwfc	(?_strlen+1)^0,w,c
  1485  00105A  6E13               	movwf	(?_pad+1)^0,c
  1486  00105C  0012               	return		;funcret
  1487  00105E                     __end_of_pad:
  1488                           	callstack 0
  1489                           
  1490 ;; *************** function _strlen *****************
  1491 ;; Defined at:
  1492 ;;		line 5 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/strlen.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1495 ;;		 -> dbuf(32), 
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1498 ;;		 -> dbuf(32), 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  2    0[COMRAM] unsigned int 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1508 ;;      Params:         2       0       0       0       0       0       0       0       0
  1509 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1511 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1512 ;;Total ram usage:        4 bytes
  1513 ;; Hardware stack levels used: 1
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_pad
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text6
  1522  001252                     __ptext6:
  1523                           	callstack 0
  1524  001252                     _strlen:
  1525                           	callstack 25
  1526  001252  C001  F003         	movff	strlen@s,strlen@a
  1527  001256  C002  F004         	movff	strlen@s+1,strlen@a+1
  1528  00125A  EF31  F009         	goto	l1128
  1529  00125E                     l1126:
  1530  00125E  4A01               	infsnz	strlen@s^0,f,c
  1531  001260  2A02               	incf	(strlen@s+1)^0,f,c
  1532  001262                     l1128:
  1533  001262  C001  FFD9         	movff	strlen@s,fsr2l
  1534  001266  C002  FFDA         	movff	strlen@s+1,fsr2h
  1535  00126A  50DF               	movf	indf2,w,c
  1536  00126C  A4D8               	btfss	status,2,c
  1537  00126E  EF3B  F009         	goto	u541
  1538  001272  EF3D  F009         	goto	u540
  1539  001276                     u541:
  1540  001276  EF2F  F009         	goto	l1126
  1541  00127A                     u540:
  1542  00127A  5003               	movf	strlen@a^0,w,c
  1543  00127C  5C01               	subwf	strlen@s^0,w,c
  1544  00127E  6E01               	movwf	?_strlen^0,c
  1545  001280  5004               	movf	(strlen@a+1)^0,w,c
  1546  001282  5802               	subwfb	(strlen@s+1)^0,w,c
  1547  001284  6E02               	movwf	(?_strlen+1)^0,c
  1548  001286  0012               	return		;funcret
  1549  001288                     __end_of_strlen:
  1550                           	callstack 0
  1551                           
  1552 ;; *************** function _fputs *****************
  1553 ;; Defined at:
  1554 ;;		line 8 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/nf_fputs.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  s               2   10[COMRAM] PTR const unsigned char 
  1557 ;;		 -> dbuf(32), 
  1558 ;;  fp              2   12[COMRAM] PTR struct _IO_FILE
  1559 ;;		 -> NULL(0), 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  i               2   15[COMRAM] int 
  1562 ;;  c               1   14[COMRAM] unsigned char 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  2   10[COMRAM] int 
  1565 ;; Registers used:
  1566 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1572 ;;      Params:         4       0       0       0       0       0       0       0       0
  1573 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1575 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1576 ;;Total ram usage:        7 bytes
  1577 ;; Hardware stack levels used: 1
  1578 ;; Hardware stack levels required when called: 2
  1579 ;; This function calls:
  1580 ;;		_fputc
  1581 ;; This function is called by:
  1582 ;;		_pad
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text7
  1587  0011CE                     __ptext7:
  1588                           	callstack 0
  1589  0011CE                     _fputs:
  1590                           	callstack 23
  1591  0011CE  0E00               	movlw	0
  1592  0011D0  6E11               	movwf	(fputs@i+1)^0,c
  1593  0011D2  0E00               	movlw	0
  1594  0011D4  6E10               	movwf	fputs@i^0,c
  1595  0011D6  EFF8  F008         	goto	l1122
  1596  0011DA                     l1118:
  1597  0011DA  C00F  F002         	movff	fputs@c,fputc@c
  1598  0011DE  6A03               	clrf	(fputc@c+1)^0,c
  1599  0011E0  C00D  F004         	movff	fputs@fp,fputc@fp
  1600  0011E4  C00E  F005         	movff	fputs@fp+1,fputc@fp+1
  1601  0011E8  EC2F  F008         	call	_fputc	;wreg free
  1602  0011EC  4A10               	infsnz	fputs@i^0,f,c
  1603  0011EE  2A11               	incf	(fputs@i+1)^0,f,c
  1604  0011F0                     l1122:
  1605  0011F0  5010               	movf	fputs@i^0,w,c
  1606  0011F2  240B               	addwf	fputs@s^0,w,c
  1607  0011F4  6ED9               	movwf	fsr2l,c
  1608  0011F6  5011               	movf	(fputs@i+1)^0,w,c
  1609  0011F8  200C               	addwfc	(fputs@s+1)^0,w,c
  1610  0011FA  6EDA               	movwf	fsr2h,c
  1611  0011FC  50DF               	movf	indf2,w,c
  1612  0011FE  6E0F               	movwf	fputs@c^0,c
  1613  001200  500F               	movf	fputs@c^0,w,c
  1614  001202  A4D8               	btfss	status,2,c
  1615  001204  EF06  F009         	goto	u531
  1616  001208  EF08  F009         	goto	u530
  1617  00120C                     u531:
  1618  00120C  EFED  F008         	goto	l1118
  1619  001210                     u530:
  1620  001210  0012               	return		;funcret
  1621  001212                     __end_of_fputs:
  1622                           	callstack 0
  1623                           
  1624 ;; *************** function _fputc *****************
  1625 ;; Defined at:
  1626 ;;		line 8 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/nf_fputc.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  c               2    1[COMRAM] int 
  1629 ;;  fp              2    3[COMRAM] PTR struct _IO_FILE
  1630 ;;		 -> NULL(0), 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  2    1[COMRAM] int 
  1635 ;; Registers used:
  1636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1642 ;;      Params:         4       0       0       0       0       0       0       0       0
  1643 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1644 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1645 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1646 ;;Total ram usage:        9 bytes
  1647 ;; Hardware stack levels used: 1
  1648 ;; Hardware stack levels required when called: 1
  1649 ;; This function calls:
  1650 ;;		_putch
  1651 ;; This function is called by:
  1652 ;;		_pad
  1653 ;;		_vfpfcnvrt
  1654 ;;		_fputs
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text8
  1659  00105E                     __ptext8:
  1660                           	callstack 0
  1661  00105E                     _fputc:
  1662                           	callstack 26
  1663  00105E  5004               	movf	fputc@fp^0,w,c
  1664  001060  1005               	iorwf	(fputc@fp+1)^0,w,c
  1665  001062  B4D8               	btfsc	status,2,c
  1666  001064  EF36  F008         	goto	u491
  1667  001068  EF38  F008         	goto	u490
  1668  00106C                     u491:
  1669  00106C  EF41  F008         	goto	l1106
  1670  001070                     u490:
  1671  001070  5004               	movf	fputc@fp^0,w,c
  1672  001072  1005               	iorwf	(fputc@fp+1)^0,w,c
  1673  001074  A4D8               	btfss	status,2,c
  1674  001076  EF3F  F008         	goto	u501
  1675  00107A  EF41  F008         	goto	u500
  1676  00107E                     u501:
  1677  00107E  EF46  F008         	goto	l1108
  1678  001082                     u500:
  1679  001082                     l1106:
  1680  001082  5002               	movf	fputc@c^0,w,c
  1681  001084  EC64  F009         	call	_putch
  1682  001088  EF79  F008         	goto	l808
  1683  00108C                     l1108:
  1684  00108C  EE20 F009          	lfsr	2,9
  1685  001090  5004               	movf	fputc@fp^0,w,c
  1686  001092  26D9               	addwf	fsr2l,f,c
  1687  001094  5005               	movf	(fputc@fp+1)^0,w,c
  1688  001096  22DA               	addwfc	fsr2h,f,c
  1689  001098  50DE               	movf	postinc2,w,c
  1690  00109A  10DE               	iorwf	postinc2,w,c
  1691  00109C  B4D8               	btfsc	status,2,c
  1692  00109E  EF53  F008         	goto	u511
  1693  0010A2  EF55  F008         	goto	u510
  1694  0010A6                     u511:
  1695  0010A6  EF70  F008         	goto	l1112
  1696  0010AA                     u510:
  1697  0010AA  EE20 F009          	lfsr	2,9
  1698  0010AE  5004               	movf	fputc@fp^0,w,c
  1699  0010B0  26D9               	addwf	fsr2l,f,c
  1700  0010B2  5005               	movf	(fputc@fp+1)^0,w,c
  1701  0010B4  22DA               	addwfc	fsr2h,f,c
  1702  0010B6  EE10 F003          	lfsr	1,3
  1703  0010BA  5004               	movf	fputc@fp^0,w,c
  1704  0010BC  26E1               	addwf	fsr1l,f,c
  1705  0010BE  5005               	movf	(fputc@fp+1)^0,w,c
  1706  0010C0  22E2               	addwfc	fsr1h,f,c
  1707  0010C2  50DE               	movf	postinc2,w,c
  1708  0010C4  5CE6               	subwf	postinc1,w,c
  1709  0010C6  50E6               	movf	postinc1,w,c
  1710  0010C8  0A80               	xorlw	128
  1711  0010CA  6E0A               	movwf	(??_fputc+4)^0,c
  1712  0010CC  50DE               	movf	postinc2,w,c
  1713  0010CE  0A80               	xorlw	128
  1714  0010D0  580A               	subwfb	(??_fputc+4)^0,w,c
  1715  0010D2  B0D8               	btfsc	status,0,c
  1716  0010D4  EF6E  F008         	goto	u521
  1717  0010D8  EF70  F008         	goto	u520
  1718  0010DC                     u521:
  1719  0010DC  EF79  F008         	goto	l808
  1720  0010E0                     u520:
  1721  0010E0                     l1112:
  1722  0010E0  EE20 F003          	lfsr	2,3
  1723  0010E4  5004               	movf	fputc@fp^0,w,c
  1724  0010E6  26D9               	addwf	fsr2l,f,c
  1725  0010E8  5005               	movf	(fputc@fp+1)^0,w,c
  1726  0010EA  22DA               	addwfc	fsr2h,f,c
  1727  0010EC  2ADE               	incf	postinc2,f,c
  1728  0010EE  0E00               	movlw	0
  1729  0010F0  22DD               	addwfc	postdec2,f,c
  1730  0010F2                     l808:
  1731  0010F2  0012               	return		;funcret
  1732  0010F4                     __end_of_fputc:
  1733                           	callstack 0
  1734                           
  1735 ;; *************** function _putch *****************
  1736 ;; Defined at:
  1737 ;;		line 6 in file "Uart_Transmit_PICT.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  c               1    wreg     unsigned char 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  c               1    0[COMRAM] unsigned char 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1751 ;;      Params:         0       0       0       0       0       0       0       0       0
  1752 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1754 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1755 ;;Total ram usage:        1 bytes
  1756 ;; Hardware stack levels used: 1
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_fputc
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text9
  1765  0012C8                     __ptext9:
  1766                           	callstack 0
  1767  0012C8                     _putch:
  1768                           	callstack 26
  1769                           
  1770                           ;incstack = 0
  1771                           ;putch@c stored from wreg
  1772  0012C8  6E01               	movwf	putch@c^0,c
  1773  0012CA                     l21:
  1774  0012CA  A89E               	btfss	158,4,c	;volatile
  1775  0012CC  EF6A  F009         	goto	u481
  1776  0012D0  EF6C  F009         	goto	u480
  1777  0012D4                     u481:
  1778  0012D4  EF65  F009         	goto	l21
  1779  0012D8                     u480:
  1780  0012D8                     
  1781                           ;Uart_Transmit_PICT.c: 8:     TXREG = c;
  1782  0012D8  C001  FFAD         	movff	putch@c,4013	;volatile
  1783  0012DC  0012               	return		;funcret
  1784  0012DE                     __end_of_putch:
  1785                           	callstack 0
  1786                           
  1787 ;; *************** function _abs *****************
  1788 ;; Defined at:
  1789 ;;		line 1 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/abs.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  a               2   18[COMRAM] int 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  2   18[COMRAM] int 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1803 ;;      Params:         2       0       0       0       0       0       0       0       0
  1804 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1805 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1806 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1807 ;;Total ram usage:        4 bytes
  1808 ;; Hardware stack levels used: 1
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		_dtoa
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           	psect	text10
  1817  001212                     __ptext10:
  1818                           	callstack 0
  1819  001212                     _abs:
  1820                           	callstack 26
  1821  001212  BE14               	btfsc	(abs@a+1)^0,7,c
  1822  001214  EF16  F009         	goto	u720
  1823  001218  5014               	movf	(abs@a+1)^0,w,c
  1824  00121A  E106               	bnz	u721
  1825  00121C  0413               	decf	abs@a^0,w,c
  1826  00121E  B0D8               	btfsc	status,0,c
  1827  001220  EF14  F009         	goto	u721
  1828  001224  EF16  F009         	goto	u720
  1829  001228                     u721:
  1830  001228  EF24  F009         	goto	l793
  1831  00122C                     u720:
  1832  00122C  C013  F015         	movff	abs@a,??_abs
  1833  001230  C014  F016         	movff	abs@a+1,??_abs+1
  1834  001234  1E15               	comf	??_abs^0,f,c
  1835  001236  1E16               	comf	(??_abs+1)^0,f,c
  1836  001238  4A15               	infsnz	??_abs^0,f,c
  1837  00123A  2A16               	incf	(??_abs+1)^0,f,c
  1838  00123C  C015  F013         	movff	??_abs,?_abs
  1839  001240  C016  F014         	movff	??_abs+1,?_abs+1
  1840  001244  EF28  F009         	goto	l796
  1841  001248                     l793:
  1842  001248  C013  F013         	movff	abs@a,?_abs
  1843  00124C  C014  F014         	movff	abs@a+1,?_abs+1
  1844  001250                     l796:
  1845  001250  0012               	return		;funcret
  1846  001252                     __end_of_abs:
  1847                           	callstack 0
  1848                           
  1849 ;; *************** function ___aomod *****************
  1850 ;; Defined at:
  1851 ;;		line 9 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/aomod.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  dividend        8    0[COMRAM] long long 
  1854 ;;  divisor         8    8[COMRAM] long long 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  sign            1   17[COMRAM] unsigned char 
  1857 ;;  counter         1   16[COMRAM] unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  8    0[COMRAM] long long 
  1860 ;; Registers used:
  1861 ;;		wreg, status,2, status,0
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1867 ;;      Params:        16       0       0       0       0       0       0       0       0
  1868 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1870 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1871 ;;Total ram usage:       18 bytes
  1872 ;; Hardware stack levels used: 1
  1873 ;; This function calls:
  1874 ;;		Nothing
  1875 ;; This function is called by:
  1876 ;;		_dtoa
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text11
  1881  000E34                     __ptext11:
  1882                           	callstack 0
  1883  000E34                     ___aomod:
  1884                           	callstack 26
  1885  000E34  0E00               	movlw	0
  1886  000E36  6E12               	movwf	___aomod@sign^0,c
  1887  000E38  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  1888  000E3A  EF23  F007         	goto	u620
  1889  000E3E  EF21  F007         	goto	u621
  1890  000E42                     u621:
  1891  000E42  EF35  F007         	goto	l1186
  1892  000E46                     u620:
  1893  000E46  1E08               	comf	(___aomod@dividend+7)^0,f,c
  1894  000E48  1E07               	comf	(___aomod@dividend+6)^0,f,c
  1895  000E4A  1E06               	comf	(___aomod@dividend+5)^0,f,c
  1896  000E4C  1E05               	comf	(___aomod@dividend+4)^0,f,c
  1897  000E4E  1E04               	comf	(___aomod@dividend+3)^0,f,c
  1898  000E50  1E03               	comf	(___aomod@dividend+2)^0,f,c
  1899  000E52  1E02               	comf	(___aomod@dividend+1)^0,f,c
  1900  000E54  6C01               	negf	___aomod@dividend^0,c
  1901  000E56  0E00               	movlw	0
  1902  000E58  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  1903  000E5A  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  1904  000E5C  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  1905  000E5E  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  1906  000E60  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  1907  000E62  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  1908  000E64  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  1909  000E66  0E01               	movlw	1
  1910  000E68  6E12               	movwf	___aomod@sign^0,c
  1911  000E6A                     l1186:
  1912  000E6A  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  1913  000E6C  EF3C  F007         	goto	u630
  1914  000E70  EF3A  F007         	goto	u631
  1915  000E74                     u631:
  1916  000E74  EF4C  F007         	goto	l1190
  1917  000E78                     u630:
  1918  000E78  1E10               	comf	(___aomod@divisor+7)^0,f,c
  1919  000E7A  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  1920  000E7C  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  1921  000E7E  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  1922  000E80  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  1923  000E82  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  1924  000E84  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  1925  000E86  6C09               	negf	___aomod@divisor^0,c
  1926  000E88  0E00               	movlw	0
  1927  000E8A  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  1928  000E8C  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  1929  000E8E  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  1930  000E90  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  1931  000E92  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  1932  000E94  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  1933  000E96  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  1934  000E98                     l1190:
  1935  000E98  5009               	movf	___aomod@divisor^0,w,c
  1936  000E9A  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  1937  000E9C  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  1938  000E9E  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  1939  000EA0  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  1940  000EA2  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  1941  000EA4  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  1942  000EA6  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  1943  000EA8  B4D8               	btfsc	status,2,c
  1944  000EAA  EF59  F007         	goto	u641
  1945  000EAE  EF5B  F007         	goto	u640
  1946  000EB2                     u641:
  1947  000EB2  EFA3  F007         	goto	l1206
  1948  000EB6                     u640:
  1949  000EB6  0E01               	movlw	1
  1950  000EB8  6E11               	movwf	___aomod@counter^0,c
  1951  000EBA  EF69  F007         	goto	l1196
  1952  000EBE                     l1194:
  1953  000EBE  90D8               	bcf	status,0,c
  1954  000EC0  3609               	rlcf	___aomod@divisor^0,f,c
  1955  000EC2  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  1956  000EC4  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  1957  000EC6  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  1958  000EC8  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  1959  000ECA  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  1960  000ECC  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  1961  000ECE  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  1962  000ED0  2A11               	incf	___aomod@counter^0,f,c
  1963  000ED2                     l1196:
  1964  000ED2  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  1965  000ED4  EF6E  F007         	goto	u651
  1966  000ED8  EF70  F007         	goto	u650
  1967  000EDC                     u651:
  1968  000EDC  EF5F  F007         	goto	l1194
  1969  000EE0                     u650:
  1970  000EE0                     l1198:
  1971  000EE0  5009               	movf	___aomod@divisor^0,w,c
  1972  000EE2  5C01               	subwf	___aomod@dividend^0,w,c
  1973  000EE4  500A               	movf	(___aomod@divisor+1)^0,w,c
  1974  000EE6  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  1975  000EE8  500B               	movf	(___aomod@divisor+2)^0,w,c
  1976  000EEA  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  1977  000EEC  500C               	movf	(___aomod@divisor+3)^0,w,c
  1978  000EEE  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  1979  000EF0  500D               	movf	(___aomod@divisor+4)^0,w,c
  1980  000EF2  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  1981  000EF4  500E               	movf	(___aomod@divisor+5)^0,w,c
  1982  000EF6  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  1983  000EF8  500F               	movf	(___aomod@divisor+6)^0,w,c
  1984  000EFA  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  1985  000EFC  5010               	movf	(___aomod@divisor+7)^0,w,c
  1986  000EFE  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  1987  000F00  A0D8               	btfss	status,0,c
  1988  000F02  EF85  F007         	goto	u661
  1989  000F06  EF87  F007         	goto	u660
  1990  000F0A                     u661:
  1991  000F0A  EF97  F007         	goto	l1202
  1992  000F0E                     u660:
  1993  000F0E  5009               	movf	___aomod@divisor^0,w,c
  1994  000F10  5E01               	subwf	___aomod@dividend^0,f,c
  1995  000F12  500A               	movf	(___aomod@divisor+1)^0,w,c
  1996  000F14  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  1997  000F16  500B               	movf	(___aomod@divisor+2)^0,w,c
  1998  000F18  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  1999  000F1A  500C               	movf	(___aomod@divisor+3)^0,w,c
  2000  000F1C  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2001  000F1E  500D               	movf	(___aomod@divisor+4)^0,w,c
  2002  000F20  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2003  000F22  500E               	movf	(___aomod@divisor+5)^0,w,c
  2004  000F24  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2005  000F26  500F               	movf	(___aomod@divisor+6)^0,w,c
  2006  000F28  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2007  000F2A  5010               	movf	(___aomod@divisor+7)^0,w,c
  2008  000F2C  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2009  000F2E                     l1202:
  2010  000F2E  90D8               	bcf	status,0,c
  2011  000F30  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2012  000F32  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2013  000F34  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2014  000F36  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2015  000F38  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2016  000F3A  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2017  000F3C  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2018  000F3E  3209               	rrcf	___aomod@divisor^0,f,c
  2019  000F40  2E11               	decfsz	___aomod@counter^0,f,c
  2020  000F42  EF70  F007         	goto	l1198
  2021  000F46                     l1206:
  2022  000F46  5012               	movf	___aomod@sign^0,w,c
  2023  000F48  B4D8               	btfsc	status,2,c
  2024  000F4A  EFA9  F007         	goto	u671
  2025  000F4E  EFAB  F007         	goto	u670
  2026  000F52                     u671:
  2027  000F52  EFBB  F007         	goto	l1210
  2028  000F56                     u670:
  2029  000F56  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2030  000F58  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2031  000F5A  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2032  000F5C  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2033  000F5E  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2034  000F60  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2035  000F62  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2036  000F64  6C01               	negf	___aomod@dividend^0,c
  2037  000F66  0E00               	movlw	0
  2038  000F68  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2039  000F6A  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2040  000F6C  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2041  000F6E  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2042  000F70  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2043  000F72  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2044  000F74  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2045  000F76                     l1210:
  2046  000F76  C001  F001         	movff	___aomod@dividend,?___aomod
  2047  000F7A  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2048  000F7E  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2049  000F82  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2050  000F86  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2051  000F8A  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2052  000F8E  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2053  000F92  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2054  000F96  0012               	return		;funcret
  2055  000F98                     __end_of___aomod:
  2056                           	callstack 0
  2057                           
  2058 ;; *************** function ___aodiv *****************
  2059 ;; Defined at:
  2060 ;;		line 9 in file "/Applications/microchip/xc8/v2.35/pic/sources/c99/common/aodiv.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  dividend        8    0[COMRAM] long long 
  2063 ;;  divisor         8    8[COMRAM] long long 
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;  quotient        8   18[COMRAM] long long 
  2066 ;;  sign            1   17[COMRAM] unsigned char 
  2067 ;;  counter         1   16[COMRAM] unsigned char 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  8    0[COMRAM] long long 
  2070 ;; Registers used:
  2071 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2077 ;;      Params:        16       0       0       0       0       0       0       0       0
  2078 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2079 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2080 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2081 ;;Total ram usage:       26 bytes
  2082 ;; Hardware stack levels used: 1
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_dtoa
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text12
  2091  000CAC                     __ptext12:
  2092                           	callstack 0
  2093  000CAC                     ___aodiv:
  2094                           	callstack 26
  2095  000CAC  0E00               	movlw	0
  2096  000CAE  6E12               	movwf	___aodiv@sign^0,c
  2097  000CB0  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2098  000CB2  EF5F  F006         	goto	u550
  2099  000CB6  EF5D  F006         	goto	u551
  2100  000CBA                     u551:
  2101  000CBA  EF71  F006         	goto	l1142
  2102  000CBE                     u550:
  2103  000CBE  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2104  000CC0  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2105  000CC2  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2106  000CC4  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2107  000CC6  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2108  000CC8  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2109  000CCA  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2110  000CCC  6C09               	negf	___aodiv@divisor^0,c
  2111  000CCE  0E00               	movlw	0
  2112  000CD0  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2113  000CD2  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2114  000CD4  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2115  000CD6  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2116  000CD8  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2117  000CDA  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2118  000CDC  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2119  000CDE  0E01               	movlw	1
  2120  000CE0  6E12               	movwf	___aodiv@sign^0,c
  2121  000CE2                     l1142:
  2122  000CE2  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2123  000CE4  EF78  F006         	goto	u560
  2124  000CE8  EF76  F006         	goto	u561
  2125  000CEC                     u561:
  2126  000CEC  EF8A  F006         	goto	l1148
  2127  000CF0                     u560:
  2128  000CF0  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2129  000CF2  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2130  000CF4  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2131  000CF6  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2132  000CF8  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2133  000CFA  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2134  000CFC  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2135  000CFE  6C01               	negf	___aodiv@dividend^0,c
  2136  000D00  0E00               	movlw	0
  2137  000D02  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2138  000D04  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2139  000D06  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2140  000D08  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2141  000D0A  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2142  000D0C  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2143  000D0E  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2144  000D10  0E01               	movlw	1
  2145  000D12  1A12               	xorwf	___aodiv@sign^0,f,c
  2146  000D14                     l1148:
  2147  000D14  EE20  F013         	lfsr	2,___aodiv@quotient
  2148  000D18  0E07               	movlw	7
  2149  000D1A                     u571:
  2150  000D1A  6ADE               	clrf	postinc2,c
  2151  000D1C  06E8               	decf	wreg,f,c
  2152  000D1E  E2FD               	bc	u571
  2153  000D20  5009               	movf	___aodiv@divisor^0,w,c
  2154  000D22  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2155  000D24  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2156  000D26  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2157  000D28  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2158  000D2A  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2159  000D2C  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2160  000D2E  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2161  000D30  B4D8               	btfsc	status,2,c
  2162  000D32  EF9D  F006         	goto	u581
  2163  000D36  EF9F  F006         	goto	u580
  2164  000D3A                     u581:
  2165  000D3A  EFF1  F006         	goto	l1170
  2166  000D3E                     u580:
  2167  000D3E  0E01               	movlw	1
  2168  000D40  6E11               	movwf	___aodiv@counter^0,c
  2169  000D42  EFAD  F006         	goto	l1156
  2170  000D46                     l1154:
  2171  000D46  90D8               	bcf	status,0,c
  2172  000D48  3609               	rlcf	___aodiv@divisor^0,f,c
  2173  000D4A  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2174  000D4C  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2175  000D4E  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2176  000D50  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2177  000D52  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2178  000D54  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2179  000D56  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2180  000D58  2A11               	incf	___aodiv@counter^0,f,c
  2181  000D5A                     l1156:
  2182  000D5A  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2183  000D5C  EFB2  F006         	goto	u591
  2184  000D60  EFB4  F006         	goto	u590
  2185  000D64                     u591:
  2186  000D64  EFA3  F006         	goto	l1154
  2187  000D68                     u590:
  2188  000D68                     l1158:
  2189  000D68  90D8               	bcf	status,0,c
  2190  000D6A  3613               	rlcf	___aodiv@quotient^0,f,c
  2191  000D6C  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2192  000D6E  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2193  000D70  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2194  000D72  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2195  000D74  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2196  000D76  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2197  000D78  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2198  000D7A  5009               	movf	___aodiv@divisor^0,w,c
  2199  000D7C  5C01               	subwf	___aodiv@dividend^0,w,c
  2200  000D7E  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2201  000D80  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2202  000D82  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2203  000D84  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2204  000D86  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2205  000D88  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2206  000D8A  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2207  000D8C  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2208  000D8E  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2209  000D90  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2210  000D92  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2211  000D94  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2212  000D96  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2213  000D98  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2214  000D9A  A0D8               	btfss	status,0,c
  2215  000D9C  EFD2  F006         	goto	u601
  2216  000DA0  EFD4  F006         	goto	u600
  2217  000DA4                     u601:
  2218  000DA4  EFE5  F006         	goto	l1166
  2219  000DA8                     u600:
  2220  000DA8  5009               	movf	___aodiv@divisor^0,w,c
  2221  000DAA  5E01               	subwf	___aodiv@dividend^0,f,c
  2222  000DAC  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2223  000DAE  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2224  000DB0  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2225  000DB2  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2226  000DB4  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2227  000DB6  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2228  000DB8  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2229  000DBA  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2230  000DBC  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2231  000DBE  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2232  000DC0  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2233  000DC2  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2234  000DC4  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2235  000DC6  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2236  000DC8  8013               	bsf	___aodiv@quotient^0,0,c
  2237  000DCA                     l1166:
  2238  000DCA  90D8               	bcf	status,0,c
  2239  000DCC  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2240  000DCE  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2241  000DD0  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2242  000DD2  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2243  000DD4  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2244  000DD6  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2245  000DD8  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2246  000DDA  3209               	rrcf	___aodiv@divisor^0,f,c
  2247  000DDC  2E11               	decfsz	___aodiv@counter^0,f,c
  2248  000DDE  EFB4  F006         	goto	l1158
  2249  000DE2                     l1170:
  2250  000DE2  5012               	movf	___aodiv@sign^0,w,c
  2251  000DE4  B4D8               	btfsc	status,2,c
  2252  000DE6  EFF7  F006         	goto	u611
  2253  000DEA  EFF9  F006         	goto	u610
  2254  000DEE                     u611:
  2255  000DEE  EF09  F007         	goto	l1174
  2256  000DF2                     u610:
  2257  000DF2  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2258  000DF4  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2259  000DF6  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2260  000DF8  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2261  000DFA  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2262  000DFC  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2263  000DFE  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2264  000E00  6C13               	negf	___aodiv@quotient^0,c
  2265  000E02  0E00               	movlw	0
  2266  000E04  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2267  000E06  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2268  000E08  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2269  000E0A  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2270  000E0C  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2271  000E0E  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2272  000E10  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2273  000E12                     l1174:
  2274  000E12  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2275  000E16  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2276  000E1A  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2277  000E1E  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2278  000E22  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2279  000E26  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2280  000E2A  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2281  000E2E  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2282  000E32  0012               	return		;funcret
  2283  000E34                     __end_of___aodiv:
  2284                           	callstack 0
  2285                           
  2286                           	psect	rparam
  2287  0000                     
  2288                           	psect	idloc
  2289                           
  2290                           ;Config register IDLOC0 @ 0x200000
  2291                           ;	unspecified, using default values
  2292  200000                     	org	2097152
  2293  200000  FF                 	db	255
  2294                           
  2295                           ;Config register IDLOC1 @ 0x200001
  2296                           ;	unspecified, using default values
  2297  200001                     	org	2097153
  2298  200001  FF                 	db	255
  2299                           
  2300                           ;Config register IDLOC2 @ 0x200002
  2301                           ;	unspecified, using default values
  2302  200002                     	org	2097154
  2303  200002  FF                 	db	255
  2304                           
  2305                           ;Config register IDLOC3 @ 0x200003
  2306                           ;	unspecified, using default values
  2307  200003                     	org	2097155
  2308  200003  FF                 	db	255
  2309                           
  2310                           ;Config register IDLOC4 @ 0x200004
  2311                           ;	unspecified, using default values
  2312  200004                     	org	2097156
  2313  200004  FF                 	db	255
  2314                           
  2315                           ;Config register IDLOC5 @ 0x200005
  2316                           ;	unspecified, using default values
  2317  200005                     	org	2097157
  2318  200005  FF                 	db	255
  2319                           
  2320                           ;Config register IDLOC6 @ 0x200006
  2321                           ;	unspecified, using default values
  2322  200006                     	org	2097158
  2323  200006  FF                 	db	255
  2324                           
  2325                           ;Config register IDLOC7 @ 0x200007
  2326                           ;	unspecified, using default values
  2327  200007                     	org	2097159
  2328  200007  FF                 	db	255
  2329                           
  2330                           	psect	config
  2331                           
  2332                           ;Config register CONFIG1L @ 0x300000
  2333                           ;	unspecified, using default values
  2334                           ;	PLL Prescaler Selection bits
  2335                           ;	PLLDIV = 0x0, unprogrammed default
  2336                           ;	System Clock Postscaler Selection bits
  2337                           ;	CPUDIV = 0x0, unprogrammed default
  2338                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  2339                           ;	USBDIV = 0x0, unprogrammed default
  2340  300000                     	org	3145728
  2341  300000  00                 	db	0
  2342                           
  2343                           ;Config register CONFIG1H @ 0x300001
  2344                           ;	unspecified, using default values
  2345                           ;	Oscillator Selection bits
  2346                           ;	FOSC = 0x5, unprogrammed default
  2347                           ;	Fail-Safe Clock Monitor Enable bit
  2348                           ;	FCMEN = 0x0, unprogrammed default
  2349                           ;	Internal/External Oscillator Switchover bit
  2350                           ;	IESO = 0x0, unprogrammed default
  2351  300001                     	org	3145729
  2352  300001  05                 	db	5
  2353                           
  2354                           ;Config register CONFIG2L @ 0x300002
  2355                           ;	unspecified, using default values
  2356                           ;	Power-up Timer Enable bit
  2357                           ;	PWRT = 0x1, unprogrammed default
  2358                           ;	Brown-out Reset Enable bits
  2359                           ;	BOR = 0x3, unprogrammed default
  2360                           ;	Brown-out Reset Voltage bits
  2361                           ;	BORV = 0x3, unprogrammed default
  2362                           ;	USB Voltage Regulator Enable bit
  2363                           ;	VREGEN = 0x0, unprogrammed default
  2364  300002                     	org	3145730
  2365  300002  1F                 	db	31
  2366                           
  2367                           ;Config register CONFIG2H @ 0x300003
  2368                           ;	unspecified, using default values
  2369                           ;	Watchdog Timer Enable bit
  2370                           ;	WDT = 0x1, unprogrammed default
  2371                           ;	Watchdog Timer Postscale Select bits
  2372                           ;	WDTPS = 0xF, unprogrammed default
  2373  300003                     	org	3145731
  2374  300003  1F                 	db	31
  2375                           
  2376                           ; Padding undefined space
  2377  300004                     	org	3145732
  2378  300004  FF                 	db	255
  2379                           
  2380                           ;Config register CONFIG3H @ 0x300005
  2381                           ;	unspecified, using default values
  2382                           ;	CCP2 MUX bit
  2383                           ;	CCP2MX = 0x1, unprogrammed default
  2384                           ;	PORTB A/D Enable bit
  2385                           ;	PBADEN = 0x1, unprogrammed default
  2386                           ;	Low-Power Timer 1 Oscillator Enable bit
  2387                           ;	LPT1OSC = 0x0, unprogrammed default
  2388                           ;	MCLR Pin Enable bit
  2389                           ;	MCLRE = 0x1, unprogrammed default
  2390  300005                     	org	3145733
  2391  300005  83                 	db	131
  2392                           
  2393                           ;Config register CONFIG4L @ 0x300006
  2394                           ;	unspecified, using default values
  2395                           ;	Stack Full/Underflow Reset Enable bit
  2396                           ;	STVREN = 0x1, unprogrammed default
  2397                           ;	Single-Supply ICSP Enable bit
  2398                           ;	LVP = 0x1, unprogrammed default
  2399                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2400                           ;	ICPRT = 0x0, unprogrammed default
  2401                           ;	Extended Instruction Set Enable bit
  2402                           ;	XINST = 0x0, unprogrammed default
  2403                           ;	Background Debugger Enable bit
  2404                           ;	DEBUG = 0x1, unprogrammed default
  2405  300006                     	org	3145734
  2406  300006  85                 	db	133
  2407                           
  2408                           ; Padding undefined space
  2409  300007                     	org	3145735
  2410  300007  FF                 	db	255
  2411                           
  2412                           ;Config register CONFIG5L @ 0x300008
  2413                           ;	unspecified, using default values
  2414                           ;	Code Protection bit
  2415                           ;	CP0 = 0x1, unprogrammed default
  2416                           ;	Code Protection bit
  2417                           ;	CP1 = 0x1, unprogrammed default
  2418                           ;	Code Protection bit
  2419                           ;	CP2 = 0x1, unprogrammed default
  2420                           ;	Code Protection bit
  2421                           ;	CP3 = 0x1, unprogrammed default
  2422  300008                     	org	3145736
  2423  300008  0F                 	db	15
  2424                           
  2425                           ;Config register CONFIG5H @ 0x300009
  2426                           ;	unspecified, using default values
  2427                           ;	Boot Block Code Protection bit
  2428                           ;	CPB = 0x1, unprogrammed default
  2429                           ;	Data EEPROM Code Protection bit
  2430                           ;	CPD = 0x1, unprogrammed default
  2431  300009                     	org	3145737
  2432  300009  C0                 	db	192
  2433                           
  2434                           ;Config register CONFIG6L @ 0x30000A
  2435                           ;	unspecified, using default values
  2436                           ;	Write Protection bit
  2437                           ;	WRT0 = 0x1, unprogrammed default
  2438                           ;	Write Protection bit
  2439                           ;	WRT1 = 0x1, unprogrammed default
  2440                           ;	Write Protection bit
  2441                           ;	WRT2 = 0x1, unprogrammed default
  2442                           ;	Write Protection bit
  2443                           ;	WRT3 = 0x1, unprogrammed default
  2444  30000A                     	org	3145738
  2445  30000A  0F                 	db	15
  2446                           
  2447                           ;Config register CONFIG6H @ 0x30000B
  2448                           ;	unspecified, using default values
  2449                           ;	Configuration Register Write Protection bit
  2450                           ;	WRTC = 0x1, unprogrammed default
  2451                           ;	Boot Block Write Protection bit
  2452                           ;	WRTB = 0x1, unprogrammed default
  2453                           ;	Data EEPROM Write Protection bit
  2454                           ;	WRTD = 0x1, unprogrammed default
  2455  30000B                     	org	3145739
  2456  30000B  E0                 	db	224
  2457                           
  2458                           ;Config register CONFIG7L @ 0x30000C
  2459                           ;	unspecified, using default values
  2460                           ;	Table Read Protection bit
  2461                           ;	EBTR0 = 0x1, unprogrammed default
  2462                           ;	Table Read Protection bit
  2463                           ;	EBTR1 = 0x1, unprogrammed default
  2464                           ;	Table Read Protection bit
  2465                           ;	EBTR2 = 0x1, unprogrammed default
  2466                           ;	Table Read Protection bit
  2467                           ;	EBTR3 = 0x1, unprogrammed default
  2468  30000C                     	org	3145740
  2469  30000C  0F                 	db	15
  2470                           
  2471                           ;Config register CONFIG7H @ 0x30000D
  2472                           ;	unspecified, using default values
  2473                           ;	Boot Block Table Read Protection bit
  2474                           ;	EBTRB = 0x1, unprogrammed default
  2475  30000D                     	org	3145741
  2476  30000D  40                 	db	64
  2477                           tosu	equ	0xFFF
  2478                           tosh	equ	0xFFE
  2479                           tosl	equ	0xFFD
  2480                           stkptr	equ	0xFFC
  2481                           pclatu	equ	0xFFB
  2482                           pclath	equ	0xFFA
  2483                           pcl	equ	0xFF9
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           prodh	equ	0xFF4
  2489                           prodl	equ	0xFF3
  2490                           indf0	equ	0xFEF
  2491                           postinc0	equ	0xFEE
  2492                           postdec0	equ	0xFED
  2493                           preinc0	equ	0xFEC
  2494                           plusw0	equ	0xFEB
  2495                           fsr0h	equ	0xFEA
  2496                           fsr0l	equ	0xFE9
  2497                           wreg	equ	0xFE8
  2498                           indf1	equ	0xFE7
  2499                           postinc1	equ	0xFE6
  2500                           postdec1	equ	0xFE5
  2501                           preinc1	equ	0xFE4
  2502                           plusw1	equ	0xFE3
  2503                           fsr1h	equ	0xFE2
  2504                           fsr1l	equ	0xFE1
  2505                           bsr	equ	0xFE0
  2506                           indf2	equ	0xFDF
  2507                           postinc2	equ	0xFDE
  2508                           postdec2	equ	0xFDD
  2509                           preinc2	equ	0xFDC
  2510                           plusw2	equ	0xFDB
  2511                           fsr2h	equ	0xFDA
  2512                           fsr2l	equ	0xFD9
  2513                           status	equ	0xFD8

Data Sizes:
    Strings     20
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160      2      42
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S566$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    S566$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[13]), STR_1(CODE[7]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[13]), STR_1(CODE[7]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[13]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _abs->___aomod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6247
                                              0 BANK0      2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    6179
                                             88 COMRAM     6     2      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5973
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5619
                                             64 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4270
                                             28 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2621
                                             17 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1191
                                             10 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     790
                                              1 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      2A       5       26.2%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITBIGSFRhhh        50      0       0      20        0.0%
BITBIGSFRll         34      0       0      23        0.0%
BITBIGSFRhl          C      0       0      21        0.0%
BITBIGSFRlh          9      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      88      24        0.0%
DATA                 0      0      88       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Mon May 23 17:52:33 2022

                     l21 12CA                       l24 12DC                       l33 1164  
                    l153 0E32                      l166 0F96                      l717 12AC  
                    l822 1286                      l808 10F2                      l816 1210  
                    l744 0FDE                      l747 1020                      l755 08B6  
                    l749 105C                      l757 08BE                      l782 0CAA  
                    l775 0AF6                      l793 1248                      l796 1250  
                    l788 11C4                      l789 11CC                      u500 1082  
                    u501 107E                      u510 10AA                      u511 10A6  
                    u600 0DA8                      u520 10E0                      u601 0DA4  
                    u521 10DC                      u610 0DF2                      u530 1210  
                    u611 0DEE                      u531 120C                      u620 0E46  
                    u540 127A                      u700 1020                      u621 0E42  
                    u541 1276                      u701 101C                      u550 0CBE  
                    u630 0E78                      u710 1030                      u551 0CBA  
                    u631 0E74                      u711 102C                      u560 0CF0  
                    u640 0EB6                      u720 122C                      u480 12D8  
                    u800 0A0E                      u561 0CEC                      u641 0EB2  
                    u721 1228                      u481 12D4                      u801 0A0A  
                    u650 0EE0                      u490 1070                      u810 0A2C  
                    u730 0846                      u571 0D1A                      u651 0EDC  
                    u491 106C                      u811 0A28                      u731 0840  
                    u580 0D3E                      u660 0F0E                      u820 0A46  
                    u740 0848                      u900 0B88                      u581 0D3A  
                    u661 0F0A                      u821 0A42                      u901 0B84  
                    u590 0D68                      u670 0F56                      u830 0A60  
                    u750 085E                      u910 0C2C                      u591 0D64  
                    u671 0F52                      u831 0A5C                      u751 085A  
                    u911 0C28                      u680 0FA8                      u840 0A70  
                    u760 088E                      u920 11C4                      u681 0FA4  
                    u841 0A6C                      u761 088A                      u921 11C0  
                    u690 0FCA                      u850 0A82                      u770 08AA  
                    u930 1134                      u691 0FC6                      u851 0A7E  
                    u771 08A6                      u931 1130                      u860 0A92  
                    u780 08D8                      u940 1150                      u861 0A8E  
                    u781 08D4                      u941 114C                      u870 0AAA  
                    u790 08E6                      u871 0AA6                      u791 08E2  
                    u880 0B1C                      u881 0B18                      u890 0B64  
                    u891 0B60                      _abs 1212                      _pad 0F98  
                    wreg 000FE8                     l1100 12D8                     l1110 10AA  
                   l1102 105E                     l1200 0F0E                     l1112 10E0  
                   l1104 1070                     l1120 11EC                     l1210 0F76  
                   l1202 0F2E                     l1106 1082                     l1122 11F0  
                   l1130 127A                     ?_abs 0013                     l1140 0CDE  
                   l1204 0F40                     l1108 108C                     l1116 11CE  
                   l1124 1252                     l1220 0FCA                     l1150 0D20  
                   l1142 0CE2                     l1134 0CAC                     l1206 0F46  
                   l1118 11DA                     l1126 125E                     l1230 1030  
                   l1222 0FD6                     l1214 0F98                     l1310 0B40  
                   l1302 0AF8                     l1160 0D7A                     l1152 0D3E  
                   l1144 0CF0                     l1136 0CB0                     l1208 0F56  
                   l1128 1262                     l1232 1044                     l1224 0FEA  
                   l1216 0FA8                     l1240 0816                     l1320 0C08  
                   l1312 0B64                     l1304 0B1C                     l1162 0DA8  
                   l1154 0D46                     l1170 0DE2                     l1146 0D10  
                   l1138 0CBE                     l1226 0FFE                     l1218 0FBC  
                   l1250 0890                     l1242 0836                     l1322 0C2C  
                   l1330 0C5A                     l1314 0B88                     l1306 0B2A  
                   l1172 0DF2                     l1164 0DC8                     l1156 0D5A  
                   l1148 0D14                     l1180 0E38                     l1236 1212  
                   l1228 1002                     l1260 08EC                     l1252 08AA  
                   l1244 085E                     l1332 0C68                     l1324 0C3A  
                   l1316 0BD0                     l1308 0B3C                     l1174 0E12  
                   l1166 0DCA                     l1158 0D68                     l1190 0E98  
                   l1182 0E46                     l1238 122C                     l1270 098A  
                   l1262 08F4                     l1254 08C6                     l1246 087E  
                   l1326 0C4E                     l1350 11A8                     l1168 0DDC  
                   l1192 0EB6                     l1184 0E66                     l1280 0A46  
                   l1272 0990                     l1264 08FC                     l1256 08D8  
                   l1248 088E                     l1336 0C74                     l1344 116C  
                   l1352 1288                     l1360 1104                     l1194 0EBE  
                   l1186 0E6A                     l1178 0E34                     l1098 12CA  
                   l1290 0A98                     l1282 0A60                     l1266 0902  
                   l1274 09F4                     l1258 08E6                     l1338 0C98  
                   l1346 1174                     l1354 1290                     l1370 1150  
                   l1362 1106                     l1196 0ED2                     l1188 0E78  
                   l1292 0AAA                     l1276 0A0E                     l1284 0A70  
                   l1268 0984                     l1348 1182                     l1364 1112  
                   l1198 0EE0                     l1294 0AB6                     l1286 0A82  
                   l1278 0A2C                     l1366 111A                     l1358 10F4  
                   l1296 0ABE                     l1288 0A92                     l1368 1134  
                   l1298 0ACE                     ?_pad 0012                     STR_1 080E  
                   STR_2 0801                     abs@a 0013                     _dbuf 0068  
                   _main 10F4                     _dtoa 0816                     _prec 0064  
                   _nout 0060                     pad@i 0019                     pad@p 0016  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001B                     fsr2l 000FD9  
                   start 0000             ___param_bank 000000                    ??_abs 0015  
                  ??_pad 0018          __end_of___aodiv 0E34                    ?_main 0001  
                  ?_dtoa 001D          __end_of___aomod 0F98                    _RCREG 000FAE  
                  _RCSTA 000FAB             vfpfcnvrt@fmt 0043                    _SPBRG 000FAF  
                  _TRISC 000F94                    _TXREG 000FAD                    _TXSTA 000FAC  
                  _flags 0066                    _fputc 105E                    _fputs 11CE  
                  pad@fp 0012                    _width 0062                    _putch 12C8  
                  main@a 0088                    dtoa@d 001F                    dtoa@i 003F  
                  dtoa@n 0037                    dtoa@p 0031                    dtoa@s 0035  
                  dtoa@w 0033                    tablat 000FF5                    status 000FD8  
        __initialization 12AE             __end_of_main 116C             __end_of_dtoa 0AF8  
                 ??_main 005F                   ??_dtoa 0027            __activetblptr 000001  
                 ?_fputc 0002                   ?_fputs 000B                   ?_putch 0001  
           vfprintf@cfmt 0057                ??___aodiv 0011                ??___aomod 0011  
                 clear_0 12B4                   isa$std 000001                   _printf 1288  
                 pad@buf 0014                   dtoa@fp 001D                   _strlen 1252  
                 fputc@c 0002                   fputs@c 000F                   fputs@i 0010  
                 fputs@s 000B             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 11CE               __accesstop 0060  __end_of__initialization 12BA  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_fputc 10F4  
          __end_of_fputs 1212            __end_of_putch 12DE                  ??_fputc 0006  
                ??_fputs 000F                  ??_putch 0001               __pbssBANK0 0060  
                ?_printf 0059                  ?_strlen 0001                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0CAC                  ___aomod 0E34  
              ?_vfprintf 0051             __psmallconst 0800                  __pcinit 12AE  
                __ramtop 0800                  __ptext0 10F4                  __ptext1 1288  
                __ptext2 116C                  __ptext3 0AF8                  __ptext4 0816  
                __ptext5 0F98                  __ptext6 1252                  __ptext7 11CE  
                __ptext8 105E                  __ptext9 12C8     end_of_initialization 12BA  
                fputc@fp 0004                  fputs@fp 000D        __end_of_vfpfcnvrt 0CAC  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 0057                  strlen@a 0003  
                strlen@s 0001                _TRISCbits 000F94              vfpfcnvrt@ap 0045  
            vfpfcnvrt@fp 0041              vfpfcnvrt@ll 0049           __end_of_printf 12AE  
         __end_of_strlen 1288      start_initialization 12AE              __end_of_abs 1252  
            __end_of_pad 105E              vfprintf@fmt 0053                 ??_printf 005D  
               ??_strlen 0003            __pcstackBANK0 0088         ___aodiv@dividend 0001  
               ?___aodiv 0001                 ?___aomod 0001         ___aodiv@quotient 0013  
            __smallconst 0800                 _PIR1bits 000F9E                _vfpfcnvrt 0AF8  
               __Hrparam 0000               vfprintf@ap 0055                 __Lrparam 0000  
             vfprintf@fp 0051             __Lsmallconst 0800               ?_vfpfcnvrt 0041  
        ___aodiv@divisor 0009          ___aodiv@counter 0011                 _dtoa$635 002F  
               __ptext10 1212                 __ptext11 0E34                 __ptext12 0CAC  
               isa$xinst 000000                 _vfprintf 116C                printf@fmt 0059  
       ___aomod@dividend 0001                 printf@ap 005D          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0047          ___aomod@counter 0011             ___aodiv@sign 0012  
           ___aomod@sign 0012  
